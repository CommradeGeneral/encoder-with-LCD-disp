
review.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00001308  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  008000f4  008000f4  00001430  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029cb  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9c  00000000  00000000  000040b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012bf  00000000  00000000  00004e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  00006110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bfa  00000000  00000000  00006690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001376  00000000  00000000  0000728a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_1>
       8:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_2>
       c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 04 	call	0x868	; 0x868 <main>
      8a:	0c 94 82 09 	jmp	0x1304	; 0x1304 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_4_bit_init>:
#include "../headers/LCD_4_bit.h"
#include "../../../generic_library/delay.h"

#define LCD_delay_us	2000

void LCD_4_bit_init(const LCD_4_bit_t LCD){
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <LCD_4_bit_init+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <LCD_4_bit_init+0x8>
      9a:	00 d0       	rcall	.+0      	; 0x9c <LCD_4_bit_init+0xa>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	5a 83       	std	Y+2, r21	; 0x02
      a2:	6b 83       	std	Y+3, r22	; 0x03
      a4:	7c 83       	std	Y+4, r23	; 0x04
      a6:	8d 83       	std	Y+5, r24	; 0x05
      a8:	9e 83       	std	Y+6, r25	; 0x06
	DIO_set_direction_pin(LCD.D[0],OUTPUT);
      aa:	61 e0       	ldi	r22, 0x01	; 1
      ac:	84 2f       	mov	r24, r20
      ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
	DIO_set_direction_pin(LCD.D[1],OUTPUT);
      b2:	61 e0       	ldi	r22, 0x01	; 1
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
	DIO_set_direction_pin(LCD.D[2],OUTPUT);
      ba:	61 e0       	ldi	r22, 0x01	; 1
      bc:	8b 81       	ldd	r24, Y+3	; 0x03
      be:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
	DIO_set_direction_pin(LCD.D[3],OUTPUT);
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	8c 81       	ldd	r24, Y+4	; 0x04
      c6:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
	DIO_set_direction_pin(LCD.RS,OUTPUT);
      ca:	61 e0       	ldi	r22, 0x01	; 1
      cc:	8d 81       	ldd	r24, Y+5	; 0x05
      ce:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
	DIO_set_direction_pin(LCD.EN,OUTPUT);
      d2:	61 e0       	ldi	r22, 0x01	; 1
      d4:	8e 81       	ldd	r24, Y+6	; 0x06
}
      d6:	26 96       	adiw	r28, 0x06	; 6
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	f8 94       	cli
      dc:	de bf       	out	0x3e, r29	; 62
      de:	0f be       	out	0x3f, r0	; 63
      e0:	cd bf       	out	0x3d, r28	; 61
      e2:	df 91       	pop	r29
      e4:	cf 91       	pop	r28
	DIO_set_direction_pin(LCD.D[0],OUTPUT);
	DIO_set_direction_pin(LCD.D[1],OUTPUT);
	DIO_set_direction_pin(LCD.D[2],OUTPUT);
	DIO_set_direction_pin(LCD.D[3],OUTPUT);
	DIO_set_direction_pin(LCD.RS,OUTPUT);
	DIO_set_direction_pin(LCD.EN,OUTPUT);
      e6:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <DIO_set_direction_pin>

000000ea <LCD_4_bit_cmd>:
	LCD_4_bit_cmd(LCD,0x06);
	LCD_4_bit_cmd(LCD,0x0C);
	LCD_4_bit_cmd(LCD,0x01);
}

void LCD_4_bit_cmd(const LCD_4_bit_t LCD,uint8_t cmd){
      ea:	bf 92       	push	r11
      ec:	cf 92       	push	r12
      ee:	df 92       	push	r13
      f0:	ef 92       	push	r14
      f2:	ff 92       	push	r15
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	00 d0       	rcall	.+0      	; 0xfe <LCD_4_bit_cmd+0x14>
      fe:	00 d0       	rcall	.+0      	; 0x100 <LCD_4_bit_cmd+0x16>
     100:	00 d0       	rcall	.+0      	; 0x102 <LCD_4_bit_cmd+0x18>
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
     106:	b4 2e       	mov	r11, r20
     108:	49 83       	std	Y+1, r20	; 0x01
     10a:	c5 2e       	mov	r12, r21
     10c:	5a 83       	std	Y+2, r21	; 0x02
     10e:	d6 2e       	mov	r13, r22
     110:	6b 83       	std	Y+3, r22	; 0x03
     112:	e7 2e       	mov	r14, r23
     114:	7c 83       	std	Y+4, r23	; 0x04
     116:	8d 83       	std	Y+5, r24	; 0x05
     118:	9e 83       	std	Y+6, r25	; 0x06
     11a:	02 2f       	mov	r16, r18
     11c:	f9 2e       	mov	r15, r25
	uint8_t temp_var;
	DIO_write_pin(LCD.RS,LOW);	// select register to command
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	
	temp_var =(cmd & 0xF0) >> 4;
     124:	10 2f       	mov	r17, r16
     126:	12 95       	swap	r17
     128:	1f 70       	andi	r17, 0x0F	; 15
	DIO_write_pin(LCD.D[0],(logic_t) (temp_var & 0x01));
     12a:	61 2f       	mov	r22, r17
     12c:	61 70       	andi	r22, 0x01	; 1
     12e:	8b 2d       	mov	r24, r11
     130:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[1],(logic_t) ((temp_var & 0x02)>>1));
     134:	11 fb       	bst	r17, 1
     136:	66 27       	eor	r22, r22
     138:	60 f9       	bld	r22, 0
     13a:	8c 2d       	mov	r24, r12
     13c:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[2],(logic_t) ((temp_var & 0x04)>>2));
     140:	12 fb       	bst	r17, 2
     142:	66 27       	eor	r22, r22
     144:	60 f9       	bld	r22, 0
     146:	8d 2d       	mov	r24, r13
     148:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[3],(logic_t) ((temp_var & 0x08)>>3));
     14c:	16 95       	lsr	r17
     14e:	16 95       	lsr	r17
     150:	16 95       	lsr	r17
     152:	61 2f       	mov	r22, r17
     154:	8e 2d       	mov	r24, r14
     156:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	
	// Enable and disable
	
	DIO_write_pin(LCD.EN,HIGH);
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	8f 2d       	mov	r24, r15
     15e:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     162:	8a e1       	ldi	r24, 0x1A	; 26
     164:	8a 95       	dec	r24
     166:	f1 f7       	brne	.-4      	; 0x164 <LCD_4_bit_cmd+0x7a>
     168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_4_bit_cmd+0x80>
	_delay_us(10);
	DIO_write_pin(LCD.EN,LOW);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	8f 2d       	mov	r24, r15
     16e:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
     172:	8f e9       	ldi	r24, 0x9F	; 159
     174:	9f e0       	ldi	r25, 0x0F	; 15
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <LCD_4_bit_cmd+0x8c>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_4_bit_cmd+0x92>
     17c:	00 00       	nop
	_delay_us(LCD_delay_us);
	
	temp_var =  (cmd & 0x0F);
	DIO_write_pin(LCD.D[0],(logic_t) (temp_var & 0x01));
     17e:	60 2f       	mov	r22, r16
     180:	61 70       	andi	r22, 0x01	; 1
     182:	8b 2d       	mov	r24, r11
     184:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[1],(logic_t) ((temp_var & 0x02)>>1));
     188:	01 fb       	bst	r16, 1
     18a:	66 27       	eor	r22, r22
     18c:	60 f9       	bld	r22, 0
     18e:	8c 2d       	mov	r24, r12
     190:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[2],(logic_t) ((temp_var & 0x04)>>2));
     194:	02 fb       	bst	r16, 2
     196:	66 27       	eor	r22, r22
     198:	60 f9       	bld	r22, 0
     19a:	8d 2d       	mov	r24, r13
     19c:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[3],(logic_t) ((temp_var & 0x08)>>3));
     1a0:	03 fb       	bst	r16, 3
     1a2:	66 27       	eor	r22, r22
     1a4:	60 f9       	bld	r22, 0
     1a6:	8e 2d       	mov	r24, r14
     1a8:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	
	// Enable and disable
	
	DIO_write_pin(LCD.EN,HIGH);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	8f 2d       	mov	r24, r15
     1b0:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
     1b4:	9a e1       	ldi	r25, 0x1A	; 26
     1b6:	9a 95       	dec	r25
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_4_bit_cmd+0xcc>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_4_bit_cmd+0xd2>
	_delay_us(10);
	DIO_write_pin(LCD.EN,LOW);
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	8f 2d       	mov	r24, r15
     1c0:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
     1c4:	8f e9       	ldi	r24, 0x9F	; 159
     1c6:	9f e0       	ldi	r25, 0x0F	; 15
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_4_bit_cmd+0xde>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_4_bit_cmd+0xe4>
     1ce:	00 00       	nop
	_delay_us(LCD_delay_us);
	
}
     1d0:	26 96       	adiw	r28, 0x06	; 6
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	bf 90       	pop	r11
     1ee:	08 95       	ret

000001f0 <LCD_4_bit_prg_init>:
	DIO_set_direction_pin(LCD.D[3],OUTPUT);
	DIO_set_direction_pin(LCD.RS,OUTPUT);
	DIO_set_direction_pin(LCD.EN,OUTPUT);
}

void LCD_4_bit_prg_init(const LCD_4_bit_t LCD){
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <LCD_4_bit_prg_init+0x6>
     1f6:	00 d0       	rcall	.+0      	; 0x1f8 <LCD_4_bit_prg_init+0x8>
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <LCD_4_bit_prg_init+0xa>
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	49 83       	std	Y+1, r20	; 0x01
     200:	5a 83       	std	Y+2, r21	; 0x02
     202:	6b 83       	std	Y+3, r22	; 0x03
     204:	7c 83       	std	Y+4, r23	; 0x04
     206:	8d 83       	std	Y+5, r24	; 0x05
     208:	9e 83       	std	Y+6, r25	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	8f e2       	ldi	r24, 0x2F	; 47
     20c:	95 e7       	ldi	r25, 0x75	; 117
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <LCD_4_bit_prg_init+0x1e>
     212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_4_bit_prg_init+0x24>
     214:	00 00       	nop
	_delay_ms(15);
	LCD_4_bit_init(LCD);
     216:	49 81       	ldd	r20, Y+1	; 0x01
     218:	5a 81       	ldd	r21, Y+2	; 0x02
     21a:	6b 81       	ldd	r22, Y+3	; 0x03
     21c:	7c 81       	ldd	r23, Y+4	; 0x04
     21e:	8d 81       	ldd	r24, Y+5	; 0x05
     220:	9e 81       	ldd	r25, Y+6	; 0x06
     222:	0e 94 49 00 	call	0x92	; 0x92 <LCD_4_bit_init>
	DIO_write_pin(LCD.EN,HIGH);
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	8e 81       	ldd	r24, Y+6	; 0x06
     22a:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[0],LOW);
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[1],LOW);
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	8a 81       	ldd	r24, Y+2	; 0x02
     23a:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[2],LOW);
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	8b 81       	ldd	r24, Y+3	; 0x03
     242:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	DIO_write_pin(LCD.D[3],LOW);
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	8c 81       	ldd	r24, Y+4	; 0x04
     24a:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	LCD_cmd(0x32);
	LCD_cmd(0x28);	//function set: two_line
	LCD_cmd(0x06);
	LCD_cmd(0x0C);
	*/
	LCD_4_bit_cmd(LCD,0x33);
     24e:	23 e3       	ldi	r18, 0x33	; 51
     250:	49 81       	ldd	r20, Y+1	; 0x01
     252:	5a 81       	ldd	r21, Y+2	; 0x02
     254:	6b 81       	ldd	r22, Y+3	; 0x03
     256:	7c 81       	ldd	r23, Y+4	; 0x04
     258:	8d 81       	ldd	r24, Y+5	; 0x05
     25a:	9e 81       	ldd	r25, Y+6	; 0x06
     25c:	0e 94 75 00 	call	0xea	; 0xea <LCD_4_bit_cmd>
	LCD_4_bit_cmd(LCD,0x32);
     260:	22 e3       	ldi	r18, 0x32	; 50
     262:	49 81       	ldd	r20, Y+1	; 0x01
     264:	5a 81       	ldd	r21, Y+2	; 0x02
     266:	6b 81       	ldd	r22, Y+3	; 0x03
     268:	7c 81       	ldd	r23, Y+4	; 0x04
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	0e 94 75 00 	call	0xea	; 0xea <LCD_4_bit_cmd>
	LCD_4_bit_cmd(LCD,0x28);
     272:	28 e2       	ldi	r18, 0x28	; 40
     274:	49 81       	ldd	r20, Y+1	; 0x01
     276:	5a 81       	ldd	r21, Y+2	; 0x02
     278:	6b 81       	ldd	r22, Y+3	; 0x03
     27a:	7c 81       	ldd	r23, Y+4	; 0x04
     27c:	8d 81       	ldd	r24, Y+5	; 0x05
     27e:	9e 81       	ldd	r25, Y+6	; 0x06
     280:	0e 94 75 00 	call	0xea	; 0xea <LCD_4_bit_cmd>
	LCD_4_bit_cmd(LCD,0x06);
     284:	26 e0       	ldi	r18, 0x06	; 6
     286:	49 81       	ldd	r20, Y+1	; 0x01
     288:	5a 81       	ldd	r21, Y+2	; 0x02
     28a:	6b 81       	ldd	r22, Y+3	; 0x03
     28c:	7c 81       	ldd	r23, Y+4	; 0x04
     28e:	8d 81       	ldd	r24, Y+5	; 0x05
     290:	9e 81       	ldd	r25, Y+6	; 0x06
     292:	0e 94 75 00 	call	0xea	; 0xea <LCD_4_bit_cmd>
	LCD_4_bit_cmd(LCD,0x0C);
     296:	2c e0       	ldi	r18, 0x0C	; 12
     298:	49 81       	ldd	r20, Y+1	; 0x01
     29a:	5a 81       	ldd	r21, Y+2	; 0x02
     29c:	6b 81       	ldd	r22, Y+3	; 0x03
     29e:	7c 81       	ldd	r23, Y+4	; 0x04
     2a0:	8d 81       	ldd	r24, Y+5	; 0x05
     2a2:	9e 81       	ldd	r25, Y+6	; 0x06
     2a4:	0e 94 75 00 	call	0xea	; 0xea <LCD_4_bit_cmd>
	LCD_4_bit_cmd(LCD,0x01);
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	49 81       	ldd	r20, Y+1	; 0x01
     2ac:	5a 81       	ldd	r21, Y+2	; 0x02
     2ae:	6b 81       	ldd	r22, Y+3	; 0x03
     2b0:	7c 81       	ldd	r23, Y+4	; 0x04
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	9e 81       	ldd	r25, Y+6	; 0x06
}
     2b6:	26 96       	adiw	r28, 0x06	; 6
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
	LCD_4_bit_cmd(LCD,0x33);
	LCD_4_bit_cmd(LCD,0x32);
	LCD_4_bit_cmd(LCD,0x28);
	LCD_4_bit_cmd(LCD,0x06);
	LCD_4_bit_cmd(LCD,0x0C);
	LCD_4_bit_cmd(LCD,0x01);
     2c6:	0c 94 75 00 	jmp	0xea	; 0xea <LCD_4_bit_cmd>

000002ca <LCD_4_bit_char>:
	DIO_write_pin(LCD.EN,LOW);
	_delay_us(LCD_delay_us);
	
}

void LCD_4_bit_char(const LCD_4_bit_t LCD, uint8_t data){
     2ca:	bf 92       	push	r11
     2cc:	cf 92       	push	r12
     2ce:	df 92       	push	r13
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	00 d0       	rcall	.+0      	; 0x2de <LCD_4_bit_char+0x14>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <LCD_4_bit_char+0x16>
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <LCD_4_bit_char+0x18>
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	b4 2e       	mov	r11, r20
     2e8:	49 83       	std	Y+1, r20	; 0x01
     2ea:	c5 2e       	mov	r12, r21
     2ec:	5a 83       	std	Y+2, r21	; 0x02
     2ee:	d6 2e       	mov	r13, r22
     2f0:	6b 83       	std	Y+3, r22	; 0x03
     2f2:	e7 2e       	mov	r14, r23
     2f4:	7c 83       	std	Y+4, r23	; 0x04
     2f6:	8d 83       	std	Y+5, r24	; 0x05
     2f8:	9e 83       	std	Y+6, r25	; 0x06
     2fa:	02 2f       	mov	r16, r18
     2fc:	f9 2e       	mov	r15, r25
		uint8_t temp_var;
		DIO_write_pin(LCD.RS,HIGH);	// select register to command
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		
		temp_var =(data & 0xF0) >> 4;
     304:	10 2f       	mov	r17, r16
     306:	12 95       	swap	r17
     308:	1f 70       	andi	r17, 0x0F	; 15
		DIO_write_pin(LCD.D[0],(logic_t) (temp_var & 0x01));
     30a:	61 2f       	mov	r22, r17
     30c:	61 70       	andi	r22, 0x01	; 1
     30e:	8b 2d       	mov	r24, r11
     310:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		DIO_write_pin(LCD.D[1],(logic_t) ((temp_var & 0x02)>>1));
     314:	11 fb       	bst	r17, 1
     316:	66 27       	eor	r22, r22
     318:	60 f9       	bld	r22, 0
     31a:	8c 2d       	mov	r24, r12
     31c:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		DIO_write_pin(LCD.D[2],(logic_t) ((temp_var & 0x04)>>2));
     320:	12 fb       	bst	r17, 2
     322:	66 27       	eor	r22, r22
     324:	60 f9       	bld	r22, 0
     326:	8d 2d       	mov	r24, r13
     328:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		DIO_write_pin(LCD.D[3],(logic_t) ((temp_var & 0x08)>>3));
     32c:	16 95       	lsr	r17
     32e:	16 95       	lsr	r17
     330:	16 95       	lsr	r17
     332:	61 2f       	mov	r22, r17
     334:	8e 2d       	mov	r24, r14
     336:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		
		// Enable and disable
		
		DIO_write_pin(LCD.EN,HIGH);
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	8f 2d       	mov	r24, r15
     33e:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     342:	8a e1       	ldi	r24, 0x1A	; 26
     344:	8a 95       	dec	r24
     346:	f1 f7       	brne	.-4      	; 0x344 <LCD_4_bit_char+0x7a>
     348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_4_bit_char+0x80>
		_delay_us(10);
		DIO_write_pin(LCD.EN,LOW);
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	8f 2d       	mov	r24, r15
     34e:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
     352:	8f e9       	ldi	r24, 0x9F	; 159
     354:	9f e0       	ldi	r25, 0x0F	; 15
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <LCD_4_bit_char+0x8c>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_4_bit_char+0x92>
     35c:	00 00       	nop
		_delay_us(LCD_delay_us);
		
		temp_var =  (data & 0x0F);
		DIO_write_pin(LCD.D[0],(logic_t) (temp_var & 0x01));
     35e:	60 2f       	mov	r22, r16
     360:	61 70       	andi	r22, 0x01	; 1
     362:	8b 2d       	mov	r24, r11
     364:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		DIO_write_pin(LCD.D[1],(logic_t) ((temp_var & 0x02)>>1));
     368:	01 fb       	bst	r16, 1
     36a:	66 27       	eor	r22, r22
     36c:	60 f9       	bld	r22, 0
     36e:	8c 2d       	mov	r24, r12
     370:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		DIO_write_pin(LCD.D[2],(logic_t) ((temp_var & 0x04)>>2));
     374:	02 fb       	bst	r16, 2
     376:	66 27       	eor	r22, r22
     378:	60 f9       	bld	r22, 0
     37a:	8d 2d       	mov	r24, r13
     37c:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		DIO_write_pin(LCD.D[3],(logic_t) ((temp_var & 0x08)>>3));
     380:	03 fb       	bst	r16, 3
     382:	66 27       	eor	r22, r22
     384:	60 f9       	bld	r22, 0
     386:	8e 2d       	mov	r24, r14
     388:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
		
		// Enable and disable
		
		DIO_write_pin(LCD.EN,HIGH);
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	8f 2d       	mov	r24, r15
     390:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
     394:	9a e1       	ldi	r25, 0x1A	; 26
     396:	9a 95       	dec	r25
     398:	f1 f7       	brne	.-4      	; 0x396 <LCD_4_bit_char+0xcc>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_4_bit_char+0xd2>
		_delay_us(10);
		DIO_write_pin(LCD.EN,LOW);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	8f 2d       	mov	r24, r15
     3a0:	0e 94 43 05 	call	0xa86	; 0xa86 <DIO_write_pin>
     3a4:	8f e9       	ldi	r24, 0x9F	; 159
     3a6:	9f e0       	ldi	r25, 0x0F	; 15
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_4_bit_char+0xde>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_4_bit_char+0xe4>
     3ae:	00 00       	nop
		_delay_us(LCD_delay_us);
}
     3b0:	26 96       	adiw	r28, 0x06	; 6
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	bf 90       	pop	r11
     3ce:	08 95       	ret

000003d0 <LCD_4_bit_string>:

void LCD_4_bit_string(const LCD_4_bit_t LCD,char str[]){
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	00 d0       	rcall	.+0      	; 0x3dc <LCD_4_bit_string+0xc>
     3dc:	00 d0       	rcall	.+0      	; 0x3de <LCD_4_bit_string+0xe>
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <LCD_4_bit_string+0x10>
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	49 83       	std	Y+1, r20	; 0x01
     3e6:	5a 83       	std	Y+2, r21	; 0x02
     3e8:	6b 83       	std	Y+3, r22	; 0x03
     3ea:	7c 83       	std	Y+4, r23	; 0x04
     3ec:	8d 83       	std	Y+5, r24	; 0x05
     3ee:	9e 83       	std	Y+6, r25	; 0x06
     3f0:	79 01       	movw	r14, r18
	uint8_t index = 0;
     3f2:	10 e0       	ldi	r17, 0x00	; 0
	while (str[index] != '\0'){
     3f4:	f7 01       	movw	r30, r14
     3f6:	e1 0f       	add	r30, r17
     3f8:	f1 1d       	adc	r31, r1
     3fa:	20 81       	ld	r18, Z
     3fc:	22 23       	and	r18, r18
     3fe:	51 f0       	breq	.+20     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		LCD_4_bit_char(LCD,str[index]);
     400:	49 81       	ldd	r20, Y+1	; 0x01
     402:	5a 81       	ldd	r21, Y+2	; 0x02
     404:	6b 81       	ldd	r22, Y+3	; 0x03
     406:	7c 81       	ldd	r23, Y+4	; 0x04
     408:	8d 81       	ldd	r24, Y+5	; 0x05
     40a:	9e 81       	ldd	r25, Y+6	; 0x06
     40c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_4_bit_char>
		index++;
     410:	1f 5f       	subi	r17, 0xFF	; 255
     412:	f0 cf       	rjmp	.-32     	; 0x3f4 <LCD_4_bit_string+0x24>
	}
}
     414:	26 96       	adiw	r28, 0x06	; 6
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	08 95       	ret

0000042c <relay_init>:
 * Created: 24/10/2023 01:10:30 ص
 *  Author: Muhammed
 */ 
#include "../headers/relay.h"

void relay_init(const relay_t relay){
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	c8 2f       	mov	r28, r24
     432:	d8 2f       	mov	r29, r24
     434:	df 71       	andi	r29, 0x1F	; 31
	DIO_set_direction_pin(relay.pin_number,OUTPUT);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	8d 2f       	mov	r24, r29
     43a:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
	DIO_write_pin(relay.pin_number,relay.state_init);
     43e:	c5 fb       	bst	r28, 5
     440:	66 27       	eor	r22, r22
     442:	60 f9       	bld	r22, 0
     444:	8d 2f       	mov	r24, r29
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
 */ 
#include "../headers/relay.h"

void relay_init(const relay_t relay){
	DIO_set_direction_pin(relay.pin_number,OUTPUT);
	DIO_write_pin(relay.pin_number,relay.state_init);
     44a:	0c 94 43 05 	jmp	0xa86	; 0xa86 <DIO_write_pin>

0000044e <relay_set_logic>:
}

void relay_set_logic(const relay_t relay,logic_t stat){
	DIO_write_pin(relay.pin_number,stat);
     44e:	8f 71       	andi	r24, 0x1F	; 31
     450:	0c 94 43 05 	jmp	0xa86	; 0xa86 <DIO_write_pin>

00000454 <encoder_count_down_2>:
		if (encoder.is_doubled) {
			INTx_ISR_callback(encoder.INTx_pol1_init,encoder_count_up[encoder.ser_no]);
			INTx_ISR_callback(encoder.INTx_pol0_init,encoder_count_down[encoder.ser_no]);
			} else {
			INTx_ISR_callback(encoder.INTx_pol1_init,encoder_count_up_no_double[encoder.ser_no]);
			INTx_ISR_callback(encoder.INTx_pol0_init,encoder_count_down_no_double[encoder.ser_no]);
     454:	8a e1       	ldi	r24, 0x1A	; 26
     456:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     45a:	81 11       	cpse	r24, r1
     45c:	0c c0       	rjmp	.+24     	; 0x476 <encoder_count_down_2+0x22>
     45e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end+0x8>
     462:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__data_end+0x9>
     466:	a0 91 fe 00 	lds	r26, 0x00FE	; 0x8000fe <__data_end+0xa>
     46a:	b0 91 ff 00 	lds	r27, 0x00FF	; 0x8000ff <__data_end+0xb>
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	a1 09       	sbc	r26, r1
     472:	b1 09       	sbc	r27, r1
     474:	0b c0       	rjmp	.+22     	; 0x48c <encoder_count_down_2+0x38>
     476:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end+0x8>
     47a:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__data_end+0x9>
     47e:	a0 91 fe 00 	lds	r26, 0x00FE	; 0x8000fe <__data_end+0xa>
     482:	b0 91 ff 00 	lds	r27, 0x00FF	; 0x8000ff <__data_end+0xb>
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	a1 1d       	adc	r26, r1
     48a:	b1 1d       	adc	r27, r1
     48c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end+0x8>
     490:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <__data_end+0x9>
     494:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <__data_end+0xa>
     498:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <__data_end+0xb>
     49c:	08 95       	ret

0000049e <encoder_count_down_1>:
     49e:	8a e1       	ldi	r24, 0x1A	; 26
     4a0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     4a4:	81 11       	cpse	r24, r1
     4a6:	0c c0       	rjmp	.+24     	; 0x4c0 <encoder_count_down_1+0x22>
     4a8:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end+0x4>
     4ac:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <__data_end+0x5>
     4b0:	a0 91 fa 00 	lds	r26, 0x00FA	; 0x8000fa <__data_end+0x6>
     4b4:	b0 91 fb 00 	lds	r27, 0x00FB	; 0x8000fb <__data_end+0x7>
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	a1 09       	sbc	r26, r1
     4bc:	b1 09       	sbc	r27, r1
     4be:	0b c0       	rjmp	.+22     	; 0x4d6 <encoder_count_down_1+0x38>
     4c0:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end+0x4>
     4c4:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <__data_end+0x5>
     4c8:	a0 91 fa 00 	lds	r26, 0x00FA	; 0x8000fa <__data_end+0x6>
     4cc:	b0 91 fb 00 	lds	r27, 0x00FB	; 0x8000fb <__data_end+0x7>
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	a1 1d       	adc	r26, r1
     4d4:	b1 1d       	adc	r27, r1
     4d6:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end+0x4>
     4da:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <__data_end+0x5>
     4de:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <__data_end+0x6>
     4e2:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <__data_end+0x7>
     4e6:	08 95       	ret

000004e8 <encoder_count_down_0>:
     4e8:	8a e1       	ldi	r24, 0x1A	; 26
     4ea:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     4ee:	81 11       	cpse	r24, r1
     4f0:	0c c0       	rjmp	.+24     	; 0x50a <encoder_count_down_0+0x22>
     4f2:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     4f6:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <__data_end+0x1>
     4fa:	a0 91 f6 00 	lds	r26, 0x00F6	; 0x8000f6 <__data_end+0x2>
     4fe:	b0 91 f7 00 	lds	r27, 0x00F7	; 0x8000f7 <__data_end+0x3>
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	a1 09       	sbc	r26, r1
     506:	b1 09       	sbc	r27, r1
     508:	0b c0       	rjmp	.+22     	; 0x520 <encoder_count_down_0+0x38>
     50a:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     50e:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <__data_end+0x1>
     512:	a0 91 f6 00 	lds	r26, 0x00F6	; 0x8000f6 <__data_end+0x2>
     516:	b0 91 f7 00 	lds	r27, 0x00F7	; 0x8000f7 <__data_end+0x3>
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	a1 1d       	adc	r26, r1
     51e:	b1 1d       	adc	r27, r1
     520:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
     524:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <__data_end+0x1>
     528:	a0 93 f6 00 	sts	0x00F6, r26	; 0x8000f6 <__data_end+0x2>
     52c:	b0 93 f7 00 	sts	0x00F7, r27	; 0x8000f7 <__data_end+0x3>
     530:	08 95       	ret

00000532 <encoder_count_up_2>:
     532:	8b e1       	ldi	r24, 0x1B	; 27
     534:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     538:	81 11       	cpse	r24, r1
     53a:	0c c0       	rjmp	.+24     	; 0x554 <encoder_count_up_2+0x22>
     53c:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end+0x8>
     540:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__data_end+0x9>
     544:	a0 91 fe 00 	lds	r26, 0x00FE	; 0x8000fe <__data_end+0xa>
     548:	b0 91 ff 00 	lds	r27, 0x00FF	; 0x8000ff <__data_end+0xb>
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	a1 1d       	adc	r26, r1
     550:	b1 1d       	adc	r27, r1
     552:	0b c0       	rjmp	.+22     	; 0x56a <encoder_count_up_2+0x38>
     554:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end+0x8>
     558:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__data_end+0x9>
     55c:	a0 91 fe 00 	lds	r26, 0x00FE	; 0x8000fe <__data_end+0xa>
     560:	b0 91 ff 00 	lds	r27, 0x00FF	; 0x8000ff <__data_end+0xb>
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	a1 09       	sbc	r26, r1
     568:	b1 09       	sbc	r27, r1
     56a:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end+0x8>
     56e:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <__data_end+0x9>
     572:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <__data_end+0xa>
     576:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <__data_end+0xb>
     57a:	08 95       	ret

0000057c <encoder_count_up_1>:
     57c:	8b e1       	ldi	r24, 0x1B	; 27
     57e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     582:	81 11       	cpse	r24, r1
     584:	0c c0       	rjmp	.+24     	; 0x59e <encoder_count_up_1+0x22>
     586:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end+0x4>
     58a:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <__data_end+0x5>
     58e:	a0 91 fa 00 	lds	r26, 0x00FA	; 0x8000fa <__data_end+0x6>
     592:	b0 91 fb 00 	lds	r27, 0x00FB	; 0x8000fb <__data_end+0x7>
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	a1 1d       	adc	r26, r1
     59a:	b1 1d       	adc	r27, r1
     59c:	0b c0       	rjmp	.+22     	; 0x5b4 <encoder_count_up_1+0x38>
     59e:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end+0x4>
     5a2:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <__data_end+0x5>
     5a6:	a0 91 fa 00 	lds	r26, 0x00FA	; 0x8000fa <__data_end+0x6>
     5aa:	b0 91 fb 00 	lds	r27, 0x00FB	; 0x8000fb <__data_end+0x7>
     5ae:	01 97       	sbiw	r24, 0x01	; 1
     5b0:	a1 09       	sbc	r26, r1
     5b2:	b1 09       	sbc	r27, r1
     5b4:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end+0x4>
     5b8:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <__data_end+0x5>
     5bc:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <__data_end+0x6>
     5c0:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <__data_end+0x7>
     5c4:	08 95       	ret

000005c6 <encoder_count_up_0>:
     5c6:	8b e1       	ldi	r24, 0x1B	; 27
     5c8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     5cc:	81 11       	cpse	r24, r1
     5ce:	0c c0       	rjmp	.+24     	; 0x5e8 <encoder_count_up_0+0x22>
     5d0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     5d4:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <__data_end+0x1>
     5d8:	a0 91 f6 00 	lds	r26, 0x00F6	; 0x8000f6 <__data_end+0x2>
     5dc:	b0 91 f7 00 	lds	r27, 0x00F7	; 0x8000f7 <__data_end+0x3>
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	a1 1d       	adc	r26, r1
     5e4:	b1 1d       	adc	r27, r1
     5e6:	0b c0       	rjmp	.+22     	; 0x5fe <encoder_count_up_0+0x38>
     5e8:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     5ec:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <__data_end+0x1>
     5f0:	a0 91 f6 00 	lds	r26, 0x00F6	; 0x8000f6 <__data_end+0x2>
     5f4:	b0 91 f7 00 	lds	r27, 0x00F7	; 0x8000f7 <__data_end+0x3>
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	a1 09       	sbc	r26, r1
     5fc:	b1 09       	sbc	r27, r1
     5fe:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
     602:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <__data_end+0x1>
     606:	a0 93 f6 00 	sts	0x00F6, r26	; 0x8000f6 <__data_end+0x2>
     60a:	b0 93 f7 00 	sts	0x00F7, r27	; 0x8000f7 <__data_end+0x3>
     60e:	08 95       	ret

00000610 <encoder_count_down_2_no_double>:
     610:	8a e1       	ldi	r24, 0x1A	; 26
     612:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     616:	81 11       	cpse	r24, r1
     618:	13 c0       	rjmp	.+38     	; 0x640 <encoder_count_down_2_no_double+0x30>
     61a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end+0x8>
     61e:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__data_end+0x9>
     622:	a0 91 fe 00 	lds	r26, 0x00FE	; 0x8000fe <__data_end+0xa>
     626:	b0 91 ff 00 	lds	r27, 0x00FF	; 0x8000ff <__data_end+0xb>
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	a1 09       	sbc	r26, r1
     62e:	b1 09       	sbc	r27, r1
     630:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end+0x8>
     634:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <__data_end+0x9>
     638:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <__data_end+0xa>
     63c:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <__data_end+0xb>
     640:	08 95       	ret

00000642 <encoder_count_up_0_no_double>:
     642:	8b e1       	ldi	r24, 0x1B	; 27
     644:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     648:	81 11       	cpse	r24, r1
     64a:	13 c0       	rjmp	.+38     	; 0x672 <encoder_count_up_0_no_double+0x30>
     64c:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     650:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <__data_end+0x1>
     654:	a0 91 f6 00 	lds	r26, 0x00F6	; 0x8000f6 <__data_end+0x2>
     658:	b0 91 f7 00 	lds	r27, 0x00F7	; 0x8000f7 <__data_end+0x3>
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	a1 1d       	adc	r26, r1
     660:	b1 1d       	adc	r27, r1
     662:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
     666:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <__data_end+0x1>
     66a:	a0 93 f6 00 	sts	0x00F6, r26	; 0x8000f6 <__data_end+0x2>
     66e:	b0 93 f7 00 	sts	0x00F7, r27	; 0x8000f7 <__data_end+0x3>
     672:	08 95       	ret

00000674 <encoder_count_up_1_no_double>:
     674:	8b e1       	ldi	r24, 0x1B	; 27
     676:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     67a:	81 11       	cpse	r24, r1
     67c:	13 c0       	rjmp	.+38     	; 0x6a4 <encoder_count_up_1_no_double+0x30>
     67e:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end+0x4>
     682:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <__data_end+0x5>
     686:	a0 91 fa 00 	lds	r26, 0x00FA	; 0x8000fa <__data_end+0x6>
     68a:	b0 91 fb 00 	lds	r27, 0x00FB	; 0x8000fb <__data_end+0x7>
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	a1 1d       	adc	r26, r1
     692:	b1 1d       	adc	r27, r1
     694:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end+0x4>
     698:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <__data_end+0x5>
     69c:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <__data_end+0x6>
     6a0:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <__data_end+0x7>
     6a4:	08 95       	ret

000006a6 <encoder_count_up_2_no_double>:
     6a6:	8b e1       	ldi	r24, 0x1B	; 27
     6a8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     6ac:	81 11       	cpse	r24, r1
     6ae:	13 c0       	rjmp	.+38     	; 0x6d6 <encoder_count_up_2_no_double+0x30>
     6b0:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end+0x8>
     6b4:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__data_end+0x9>
     6b8:	a0 91 fe 00 	lds	r26, 0x00FE	; 0x8000fe <__data_end+0xa>
     6bc:	b0 91 ff 00 	lds	r27, 0x00FF	; 0x8000ff <__data_end+0xb>
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	a1 1d       	adc	r26, r1
     6c4:	b1 1d       	adc	r27, r1
     6c6:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end+0x8>
     6ca:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <__data_end+0x9>
     6ce:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <__data_end+0xa>
     6d2:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <__data_end+0xb>
     6d6:	08 95       	ret

000006d8 <encoder_count_down_0_no_double>:
     6d8:	8a e1       	ldi	r24, 0x1A	; 26
     6da:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     6de:	81 11       	cpse	r24, r1
     6e0:	13 c0       	rjmp	.+38     	; 0x708 <encoder_count_down_0_no_double+0x30>
     6e2:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     6e6:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <__data_end+0x1>
     6ea:	a0 91 f6 00 	lds	r26, 0x00F6	; 0x8000f6 <__data_end+0x2>
     6ee:	b0 91 f7 00 	lds	r27, 0x00F7	; 0x8000f7 <__data_end+0x3>
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	a1 09       	sbc	r26, r1
     6f6:	b1 09       	sbc	r27, r1
     6f8:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
     6fc:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <__data_end+0x1>
     700:	a0 93 f6 00 	sts	0x00F6, r26	; 0x8000f6 <__data_end+0x2>
     704:	b0 93 f7 00 	sts	0x00F7, r27	; 0x8000f7 <__data_end+0x3>
     708:	08 95       	ret

0000070a <encoder_count_down_1_no_double>:
     70a:	8a e1       	ldi	r24, 0x1A	; 26
     70c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_read_pin>
     710:	81 11       	cpse	r24, r1
     712:	13 c0       	rjmp	.+38     	; 0x73a <encoder_count_down_1_no_double+0x30>
     714:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end+0x4>
     718:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <__data_end+0x5>
     71c:	a0 91 fa 00 	lds	r26, 0x00FA	; 0x8000fa <__data_end+0x6>
     720:	b0 91 fb 00 	lds	r27, 0x00FB	; 0x8000fb <__data_end+0x7>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	a1 09       	sbc	r26, r1
     728:	b1 09       	sbc	r27, r1
     72a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end+0x4>
     72e:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <__data_end+0x5>
     732:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <__data_end+0x6>
     736:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <__data_end+0x7>
     73a:	08 95       	ret

0000073c <encoder_init>:
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	f6 2e       	mov	r15, r22
     748:	c7 2f       	mov	r28, r23
     74a:	06 2f       	mov	r16, r22
     74c:	06 95       	lsr	r16
     74e:	03 70       	andi	r16, 0x03	; 3
     750:	16 2f       	mov	r17, r22
     752:	16 95       	lsr	r17
     754:	16 95       	lsr	r17
     756:	16 95       	lsr	r17
     758:	13 70       	andi	r17, 0x03	; 3
     75a:	0e 94 94 06 	call	0xd28	; 0xd28 <GINT_enable_global_interrupt>
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	80 2f       	mov	r24, r16
     764:	0e 94 d5 05 	call	0xbaa	; 0xbaa <INTx_init>
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	62 e0       	ldi	r22, 0x02	; 2
     76c:	81 2f       	mov	r24, r17
     76e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <INTx_init>
     772:	d0 e0       	ldi	r29, 0x00	; 0
     774:	cc 0f       	add	r28, r28
     776:	dd 1f       	adc	r29, r29
     778:	fe 01       	movw	r30, r28
     77a:	f5 fe       	sbrs	r15, 5
     77c:	0a c0       	rjmp	.+20     	; 0x792 <encoder_init+0x56>
     77e:	ea 54       	subi	r30, 0x4A	; 74
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	60 81       	ld	r22, Z
     784:	71 81       	ldd	r23, Z+1	; 0x01
     786:	80 2f       	mov	r24, r16
     788:	0e 94 11 06 	call	0xc22	; 0xc22 <INTx_ISR_callback>
     78c:	c6 55       	subi	r28, 0x56	; 86
     78e:	df 4f       	sbci	r29, 0xFF	; 255
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <encoder_init+0x68>
     792:	e0 55       	subi	r30, 0x50	; 80
     794:	ff 4f       	sbci	r31, 0xFF	; 255
     796:	60 81       	ld	r22, Z
     798:	71 81       	ldd	r23, Z+1	; 0x01
     79a:	80 2f       	mov	r24, r16
     79c:	0e 94 11 06 	call	0xc22	; 0xc22 <INTx_ISR_callback>
     7a0:	cc 55       	subi	r28, 0x5C	; 92
     7a2:	df 4f       	sbci	r29, 0xFF	; 255
     7a4:	68 81       	ld	r22, Y
     7a6:	79 81       	ldd	r23, Y+1	; 0x01
     7a8:	81 2f       	mov	r24, r17
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	0c 94 11 06 	jmp	0xc22	; 0xc22 <INTx_ISR_callback>

000007b8 <encoder_get_pulses>:
		}
	}
}

int32_t encoder_get_pulses(rotary_encoder_t encoder){
	return pulses_counter[encoder.ser_no];
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	78 9f       	mul	r23, r24
     7bc:	f0 01       	movw	r30, r0
     7be:	11 24       	eor	r1, r1
     7c0:	ec 50       	subi	r30, 0x0C	; 12
     7c2:	ff 4f       	sbci	r31, 0xFF	; 255
     7c4:	60 81       	ld	r22, Z
     7c6:	71 81       	ldd	r23, Z+1	; 0x01
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	93 81       	ldd	r25, Z+3	; 0x03
}
     7cc:	08 95       	ret

000007ce <floor_calc>:
	}
	
	
}

uint8_t floor_calc(int32_t list[],uint8_t num_of_floors,int32_t current_distance){
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	a6 2f       	mov	r26, r22
     7d8:	fc 01       	movw	r30, r24
	logic_t temp_floor = HIGH;
	static uint8_t temp_floor_2 = 0;
	for (uint8_t k=0;k<num_of_floors;k++){
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	9a 17       	cp	r25, r26
     7de:	a1 f0       	breq	.+40     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		if (abs(list[k] - current_distance) < 72) {
     7e0:	c1 90       	ld	r12, Z+
     7e2:	d1 90       	ld	r13, Z+
     7e4:	e1 90       	ld	r14, Z+
     7e6:	f1 90       	ld	r15, Z+
     7e8:	b6 01       	movw	r22, r12
     7ea:	62 1b       	sub	r22, r18
     7ec:	73 0b       	sbc	r23, r19
     7ee:	69 3b       	cpi	r22, 0xB9	; 185
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	78 07       	cpc	r23, r24
     7f4:	3c f0       	brlt	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7f6:	68 34       	cpi	r22, 0x48	; 72
     7f8:	71 05       	cpc	r23, r1
     7fa:	24 f4       	brge	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			temp_floor = LOW;
			temp_floor_2 = k;
     7fc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <temp_floor_2.2324>
uint8_t floor_calc(int32_t list[],uint8_t num_of_floors,int32_t current_distance){
	logic_t temp_floor = HIGH;
	static uint8_t temp_floor_2 = 0;
	for (uint8_t k=0;k<num_of_floors;k++){
		if (abs(list[k] - current_distance) < 72) {
			temp_floor = LOW;
     800:	60 e0       	ldi	r22, 0x00	; 0
			temp_floor_2 = k;
			break;
     802:	03 c0       	rjmp	.+6      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
}

uint8_t floor_calc(int32_t list[],uint8_t num_of_floors,int32_t current_distance){
	logic_t temp_floor = HIGH;
	static uint8_t temp_floor_2 = 0;
	for (uint8_t k=0;k<num_of_floors;k++){
     804:	9f 5f       	subi	r25, 0xFF	; 255
     806:	ea cf       	rjmp	.-44     	; 0x7dc <floor_calc+0xe>
	
	
}

uint8_t floor_calc(int32_t list[],uint8_t num_of_floors,int32_t current_distance){
	logic_t temp_floor = HIGH;
     808:	61 e0       	ldi	r22, 0x01	; 1
			break;
		} else {
			
		}
	}
	relay_set_logic(relay1,temp_floor);
     80a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <relay1>
     80e:	0e 94 27 02 	call	0x44e	; 0x44e <relay_set_logic>
	return temp_floor_2;
}
     812:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <temp_floor_2.2324>
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	08 95       	ret

00000820 <floor_calc_2>:

void floor_calc_2(int32_t list[],uint8_t num_of_floors,int32_t current_distance){
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	a6 2f       	mov	r26, r22
     82a:	fc 01       	movw	r30, r24
	logic_t temp_floor = HIGH;
	for (uint8_t k=0;k<num_of_floors;k++){
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	9a 17       	cp	r25, r26
     830:	81 f0       	breq	.+32     	; 0x852 <floor_calc_2+0x32>
		if (abs(list[k] - current_distance) < 140) {
     832:	c1 90       	ld	r12, Z+
     834:	d1 90       	ld	r13, Z+
     836:	e1 90       	ld	r14, Z+
     838:	f1 90       	ld	r15, Z+
     83a:	b6 01       	movw	r22, r12
     83c:	62 1b       	sub	r22, r18
     83e:	73 0b       	sbc	r23, r19
     840:	65 37       	cpi	r22, 0x75	; 117
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	78 07       	cpc	r23, r24
     846:	1c f0       	brlt	.+6      	; 0x84e <floor_calc_2+0x2e>
     848:	6c 38       	cpi	r22, 0x8C	; 140
     84a:	71 05       	cpc	r23, r1
     84c:	24 f0       	brlt	.+8      	; 0x856 <floor_calc_2+0x36>
	return temp_floor_2;
}

void floor_calc_2(int32_t list[],uint8_t num_of_floors,int32_t current_distance){
	logic_t temp_floor = HIGH;
	for (uint8_t k=0;k<num_of_floors;k++){
     84e:	9f 5f       	subi	r25, 0xFF	; 255
     850:	ee cf       	rjmp	.-36     	; 0x82e <floor_calc_2+0xe>
	relay_set_logic(relay1,temp_floor);
	return temp_floor_2;
}

void floor_calc_2(int32_t list[],uint8_t num_of_floors,int32_t current_distance){
	logic_t temp_floor = HIGH;
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	01 c0       	rjmp	.+2      	; 0x858 <floor_calc_2+0x38>
	for (uint8_t k=0;k<num_of_floors;k++){
		if (abs(list[k] - current_distance) < 140) {
			temp_floor = LOW;
     856:	60 e0       	ldi	r22, 0x00	; 0
			break;
			} else {
			
		}
	}
	relay_set_logic(relay2,temp_floor);
     858:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <relay2>
}
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
			break;
			} else {
			
		}
	}
	relay_set_logic(relay2,temp_floor);
     864:	0c 94 27 02 	jmp	0x44e	; 0x44e <relay_set_logic>

00000868 <main>:


char buff[16];

int main(void)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <main+0x6>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
	encoder_init(encoder0);
     872:	80 90 d7 00 	lds	r8, 0x00D7	; 0x8000d7 <encoder0>
     876:	90 90 d8 00 	lds	r9, 0x00D8	; 0x8000d8 <encoder0+0x1>
     87a:	a0 90 d9 00 	lds	r10, 0x00D9	; 0x8000d9 <encoder0+0x2>
     87e:	b0 90 da 00 	lds	r11, 0x00DA	; 0x8000da <encoder0+0x3>
     882:	c5 01       	movw	r24, r10
     884:	b4 01       	movw	r22, r8
     886:	0e 94 9e 03 	call	0x73c	; 0x73c <encoder_init>
	DIO_set_direction_pin(DIO_pin_B7,INPUT);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	8f e0       	ldi	r24, 0x0F	; 15
     88e:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
	DIO_enable_disable_pull_up_pin(DIO_pin_B7,ENABLE);
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	8f e0       	ldi	r24, 0x0F	; 15
     896:	0e 94 93 05 	call	0xb26	; 0xb26 <DIO_enable_disable_pull_up_pin>
	LCD_4_bit_prg_init(LCD1);
     89a:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <LCD1>
     89e:	50 91 d2 00 	lds	r21, 0x00D2	; 0x8000d2 <LCD1+0x1>
     8a2:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <LCD1+0x2>
     8a6:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <LCD1+0x3>
     8aa:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <LCD1+0x4>
     8ae:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <LCD1+0x5>
     8b2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_4_bit_prg_init>
	relay_init(relay1);
     8b6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <relay1>
     8ba:	0e 94 16 02 	call	0x42c	; 0x42c <relay_init>
	relay_init(relay2);
     8be:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <relay2>
     8c2:	0e 94 16 02 	call	0x42c	; 0x42c <relay_init>
		acc2 = floor_calc(distances,6,encoder_get_pulses(encoder0));
		floor_calc_2(selectors,10,encoder_get_pulses(encoder0));
		acc = encoder_get_pulses(encoder0);
		if (abs(memory - acc)>2){
			memory = (acc);
			LCD_4_bit_cmd(LCD1,0x01);
     8c6:	60 90 d1 00 	lds	r6, 0x00D1	; 0x8000d1 <LCD1>
     8ca:	70 90 d2 00 	lds	r7, 0x00D2	; 0x8000d2 <LCD1+0x1>
     8ce:	c0 90 d3 00 	lds	r12, 0x00D3	; 0x8000d3 <LCD1+0x2>
     8d2:	d0 90 d4 00 	lds	r13, 0x00D4	; 0x8000d4 <LCD1+0x3>
     8d6:	50 90 d5 00 	lds	r5, 0x00D5	; 0x8000d5 <LCD1+0x4>
     8da:	40 90 d6 00 	lds	r4, 0x00D6	; 0x8000d6 <LCD1+0x5>
			sprintf(buff, "d = %ld",acc);
     8de:	8c eb       	ldi	r24, 0xBC	; 188
     8e0:	e8 2e       	mov	r14, r24
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	f8 2e       	mov	r15, r24
			LCD_4_bit_string(LCD1,buff);
     8e6:	36 2c       	mov	r3, r6
     8e8:	27 2c       	mov	r2, r7
     8ea:	c9 82       	std	Y+1, r12	; 0x01
     8ec:	da 82       	std	Y+2, r13	; 0x02
			LCD_4_bit_cmd(LCD1,0x80 + 0x40);
			sprintf(buff, "floor = %d", acc2);
     8ee:	04 ec       	ldi	r16, 0xC4	; 196
     8f0:	10 e0       	ldi	r17, 0x00	; 0
	LCD_4_bit_prg_init(LCD1);
	relay_init(relay1);
	relay_init(relay2);
	while (1)
	{
		acc2 = floor_calc(distances,6,encoder_get_pulses(encoder0));
     8f2:	c5 01       	movw	r24, r10
     8f4:	b4 01       	movw	r22, r8
     8f6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <encoder_get_pulses>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	66 e0       	ldi	r22, 0x06	; 6
     900:	88 e8       	ldi	r24, 0x88	; 136
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 e7 03 	call	0x7ce	; 0x7ce <floor_calc>
     908:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <acc2>
		floor_calc_2(selectors,10,encoder_get_pulses(encoder0));
     90c:	c5 01       	movw	r24, r10
     90e:	b4 01       	movw	r22, r8
     910:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <encoder_get_pulses>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	6a e0       	ldi	r22, 0x0A	; 10
     91a:	80 e6       	ldi	r24, 0x60	; 96
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 10 04 	call	0x820	; 0x820 <floor_calc_2>
		acc = encoder_get_pulses(encoder0);
     922:	c5 01       	movw	r24, r10
     924:	b4 01       	movw	r22, r8
     926:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <encoder_get_pulses>
     92a:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <acc>
     92e:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <acc+0x1>
     932:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <acc+0x2>
     936:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <acc+0x3>
		if (abs(memory - acc)>2){
     93a:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <memory>
     93e:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <memory+0x1>
     942:	26 1b       	sub	r18, r22
     944:	37 0b       	sbc	r19, r23
     946:	37 ff       	sbrs	r19, 7
     948:	03 c0       	rjmp	.+6      	; 0x950 <main+0xe8>
     94a:	31 95       	neg	r19
     94c:	21 95       	neg	r18
     94e:	31 09       	sbc	r19, r1
     950:	23 30       	cpi	r18, 0x03	; 3
     952:	31 05       	cpc	r19, r1
     954:	74 f2       	brlt	.-100    	; 0x8f2 <main+0x8a>
			memory = (acc);
     956:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <memory>
     95a:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <memory+0x1>
     95e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <memory+0x2>
     962:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <memory+0x3>
			LCD_4_bit_cmd(LCD1,0x01);
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	a3 01       	movw	r20, r6
     96a:	b6 01       	movw	r22, r12
     96c:	85 2d       	mov	r24, r5
     96e:	94 2d       	mov	r25, r4
     970:	0e 94 75 00 	call	0xea	; 0xea <LCD_4_bit_cmd>
			sprintf(buff, "d = %ld",acc);
     974:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <acc+0x3>
     978:	8f 93       	push	r24
     97a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <acc+0x2>
     97e:	8f 93       	push	r24
     980:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <acc+0x1>
     984:	8f 93       	push	r24
     986:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <acc>
     98a:	8f 93       	push	r24
     98c:	ff 92       	push	r15
     98e:	ef 92       	push	r14
     990:	8a e0       	ldi	r24, 0x0A	; 10
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	0e 94 98 06 	call	0xd30	; 0xd30 <sprintf>
			LCD_4_bit_string(LCD1,buff);
     99c:	2a e0       	ldi	r18, 0x0A	; 10
     99e:	31 e0       	ldi	r19, 0x01	; 1
     9a0:	43 2d       	mov	r20, r3
     9a2:	52 2d       	mov	r21, r2
     9a4:	69 81       	ldd	r22, Y+1	; 0x01
     9a6:	7a 81       	ldd	r23, Y+2	; 0x02
     9a8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <LCD1+0x4>
     9ac:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <LCD1+0x5>
     9b0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_4_bit_string>
			LCD_4_bit_cmd(LCD1,0x80 + 0x40);
     9b4:	20 ec       	ldi	r18, 0xC0	; 192
     9b6:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <LCD1>
     9ba:	50 91 d2 00 	lds	r21, 0x00D2	; 0x8000d2 <LCD1+0x1>
     9be:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <LCD1+0x2>
     9c2:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <LCD1+0x3>
     9c6:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <LCD1+0x4>
     9ca:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <LCD1+0x5>
     9ce:	0e 94 75 00 	call	0xea	; 0xea <LCD_4_bit_cmd>
			sprintf(buff, "floor = %d", acc2);
     9d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <acc2>
     9d6:	1f 92       	push	r1
     9d8:	8f 93       	push	r24
     9da:	1f 93       	push	r17
     9dc:	0f 93       	push	r16
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	0e 94 98 06 	call	0xd30	; 0xd30 <sprintf>
			LCD_4_bit_string(LCD1,buff);
     9ea:	2a e0       	ldi	r18, 0x0A	; 10
     9ec:	31 e0       	ldi	r19, 0x01	; 1
     9ee:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <LCD1>
     9f2:	50 91 d2 00 	lds	r21, 0x00D2	; 0x8000d2 <LCD1+0x1>
     9f6:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <LCD1+0x2>
     9fa:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <LCD1+0x3>
     9fe:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <LCD1+0x4>
     a02:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <LCD1+0x5>
     a06:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_4_bit_string>
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	6e cf       	rjmp	.-292    	; 0x8f2 <main+0x8a>

00000a16 <DIO_set_direction_pin>:
	}
}


void DIO_toggle_pin(DIO_pin_number_t pin){
	TOGGLE_BIT(*PORTx[(uint8_t)pin / 8],(uint8_t)pin % 8);
     a16:	66 23       	and	r22, r22
     a18:	d9 f0       	breq	.+54     	; 0xa50 <DIO_set_direction_pin+0x3a>
     a1a:	61 30       	cpi	r22, 0x01	; 1
     a1c:	99 f5       	brne	.+102    	; 0xa84 <DIO_set_direction_pin+0x6e>
     a1e:	e8 2f       	mov	r30, r24
     a20:	e6 95       	lsr	r30
     a22:	e6 95       	lsr	r30
     a24:	e6 95       	lsr	r30
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	ed 51       	subi	r30, 0x1D	; 29
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	01 90       	ld	r0, Z+
     a32:	f0 81       	ld	r31, Z
     a34:	e0 2d       	mov	r30, r0
     a36:	40 81       	ld	r20, Z
     a38:	87 70       	andi	r24, 0x07	; 7
     a3a:	21 e0       	ldi	r18, 0x01	; 1
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	b9 01       	movw	r22, r18
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <DIO_set_direction_pin+0x30>
     a42:	66 0f       	add	r22, r22
     a44:	77 1f       	adc	r23, r23
     a46:	8a 95       	dec	r24
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <DIO_set_direction_pin+0x2c>
     a4a:	cb 01       	movw	r24, r22
     a4c:	84 2b       	or	r24, r20
     a4e:	19 c0       	rjmp	.+50     	; 0xa82 <DIO_set_direction_pin+0x6c>
     a50:	e8 2f       	mov	r30, r24
     a52:	e6 95       	lsr	r30
     a54:	e6 95       	lsr	r30
     a56:	e6 95       	lsr	r30
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	ed 51       	subi	r30, 0x1D	; 29
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	01 90       	ld	r0, Z+
     a64:	f0 81       	ld	r31, Z
     a66:	e0 2d       	mov	r30, r0
     a68:	40 81       	ld	r20, Z
     a6a:	87 70       	andi	r24, 0x07	; 7
     a6c:	21 e0       	ldi	r18, 0x01	; 1
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	b9 01       	movw	r22, r18
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <DIO_set_direction_pin+0x62>
     a74:	66 0f       	add	r22, r22
     a76:	77 1f       	adc	r23, r23
     a78:	8a 95       	dec	r24
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <DIO_set_direction_pin+0x5e>
     a7c:	cb 01       	movw	r24, r22
     a7e:	80 95       	com	r24
     a80:	84 23       	and	r24, r20
     a82:	80 83       	st	Z, r24
     a84:	08 95       	ret

00000a86 <DIO_write_pin>:
     a86:	66 23       	and	r22, r22
     a88:	d9 f0       	breq	.+54     	; 0xac0 <DIO_write_pin+0x3a>
     a8a:	61 30       	cpi	r22, 0x01	; 1
     a8c:	99 f5       	brne	.+102    	; 0xaf4 <DIO_write_pin+0x6e>
     a8e:	e8 2f       	mov	r30, r24
     a90:	e6 95       	lsr	r30
     a92:	e6 95       	lsr	r30
     a94:	e6 95       	lsr	r30
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	ee 0f       	add	r30, r30
     a9a:	ff 1f       	adc	r31, r31
     a9c:	e5 51       	subi	r30, 0x15	; 21
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	01 90       	ld	r0, Z+
     aa2:	f0 81       	ld	r31, Z
     aa4:	e0 2d       	mov	r30, r0
     aa6:	40 81       	ld	r20, Z
     aa8:	87 70       	andi	r24, 0x07	; 7
     aaa:	21 e0       	ldi	r18, 0x01	; 1
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	b9 01       	movw	r22, r18
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_write_pin+0x30>
     ab2:	66 0f       	add	r22, r22
     ab4:	77 1f       	adc	r23, r23
     ab6:	8a 95       	dec	r24
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_write_pin+0x2c>
     aba:	cb 01       	movw	r24, r22
     abc:	84 2b       	or	r24, r20
     abe:	19 c0       	rjmp	.+50     	; 0xaf2 <DIO_write_pin+0x6c>
     ac0:	e8 2f       	mov	r30, r24
     ac2:	e6 95       	lsr	r30
     ac4:	e6 95       	lsr	r30
     ac6:	e6 95       	lsr	r30
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	e5 51       	subi	r30, 0x15	; 21
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	01 90       	ld	r0, Z+
     ad4:	f0 81       	ld	r31, Z
     ad6:	e0 2d       	mov	r30, r0
     ad8:	40 81       	ld	r20, Z
     ada:	87 70       	andi	r24, 0x07	; 7
     adc:	21 e0       	ldi	r18, 0x01	; 1
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	b9 01       	movw	r22, r18
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_write_pin+0x62>
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	8a 95       	dec	r24
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_write_pin+0x5e>
     aec:	cb 01       	movw	r24, r22
     aee:	80 95       	com	r24
     af0:	84 23       	and	r24, r20
     af2:	80 83       	st	Z, r24
     af4:	08 95       	ret

00000af6 <DIO_read_pin>:
}

logic_t DIO_read_pin(DIO_pin_number_t pin){
	return READ_BIT(*PINx[(uint8_t)pin / 8],(uint8_t)pin % 8);
     af6:	e8 2f       	mov	r30, r24
     af8:	e6 95       	lsr	r30
     afa:	e6 95       	lsr	r30
     afc:	e6 95       	lsr	r30
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	e5 52       	subi	r30, 0x25	; 37
     b06:	ff 4f       	sbci	r31, 0xFF	; 255
     b08:	01 90       	ld	r0, Z+
     b0a:	f0 81       	ld	r31, Z
     b0c:	e0 2d       	mov	r30, r0
     b0e:	20 81       	ld	r18, Z
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	87 70       	andi	r24, 0x07	; 7
     b14:	a9 01       	movw	r20, r18
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_read_pin+0x26>
     b18:	55 95       	asr	r21
     b1a:	47 95       	ror	r20
     b1c:	8a 95       	dec	r24
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_read_pin+0x22>
     b20:	ca 01       	movw	r24, r20
}
     b22:	81 70       	andi	r24, 0x01	; 1
     b24:	08 95       	ret

00000b26 <DIO_enable_disable_pull_up_pin>:

void DIO_enable_disable_pull_up_pin(DIO_pin_number_t pin,active_t logic){
	uint8_t arg1 = (uint8_t) pin / 8;
	uint8_t arg2 = (uint8_t) pin % 8;
	if (!READ_BIT(*DDRx[arg1],arg2)) {
     b26:	28 2f       	mov	r18, r24
     b28:	26 95       	lsr	r18
     b2a:	26 95       	lsr	r18
     b2c:	26 95       	lsr	r18
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	f9 01       	movw	r30, r18
     b36:	ed 51       	subi	r30, 0x1D	; 29
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	01 90       	ld	r0, Z+
     b3c:	f0 81       	ld	r31, Z
     b3e:	e0 2d       	mov	r30, r0
     b40:	40 81       	ld	r20, Z
     b42:	87 70       	andi	r24, 0x07	; 7
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	08 2e       	mov	r0, r24
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <DIO_enable_disable_pull_up_pin+0x28>
     b4a:	55 95       	asr	r21
     b4c:	47 95       	ror	r20
     b4e:	0a 94       	dec	r0
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <DIO_enable_disable_pull_up_pin+0x24>
     b52:	40 fd       	sbrc	r20, 0
     b54:	29 c0       	rjmp	.+82     	; 0xba8 <DIO_enable_disable_pull_up_pin+0x82>
		switch (logic) {
     b56:	66 23       	and	r22, r22
     b58:	a1 f0       	breq	.+40     	; 0xb82 <DIO_enable_disable_pull_up_pin+0x5c>
     b5a:	61 30       	cpi	r22, 0x01	; 1
     b5c:	29 f5       	brne	.+74     	; 0xba8 <DIO_enable_disable_pull_up_pin+0x82>
			case ENABLE: 
				SET_BIT(*PORTx[arg1],arg2);
     b5e:	f9 01       	movw	r30, r18
     b60:	e5 51       	subi	r30, 0x15	; 21
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	01 90       	ld	r0, Z+
     b66:	f0 81       	ld	r31, Z
     b68:	e0 2d       	mov	r30, r0
     b6a:	40 81       	ld	r20, Z
     b6c:	21 e0       	ldi	r18, 0x01	; 1
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	b9 01       	movw	r22, r18
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <DIO_enable_disable_pull_up_pin+0x52>
     b74:	66 0f       	add	r22, r22
     b76:	77 1f       	adc	r23, r23
     b78:	8a 95       	dec	r24
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <DIO_enable_disable_pull_up_pin+0x4e>
     b7c:	cb 01       	movw	r24, r22
     b7e:	84 2b       	or	r24, r20
     b80:	12 c0       	rjmp	.+36     	; 0xba6 <DIO_enable_disable_pull_up_pin+0x80>
			break;
			
			case DISABLE:
				CLEAR_BIT(*PORTx[arg1],arg2);
     b82:	f9 01       	movw	r30, r18
     b84:	e5 51       	subi	r30, 0x15	; 21
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	01 90       	ld	r0, Z+
     b8a:	f0 81       	ld	r31, Z
     b8c:	e0 2d       	mov	r30, r0
     b8e:	40 81       	ld	r20, Z
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	b9 01       	movw	r22, r18
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_enable_disable_pull_up_pin+0x76>
     b98:	66 0f       	add	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	8a 95       	dec	r24
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_enable_disable_pull_up_pin+0x72>
     ba0:	cb 01       	movw	r24, r22
     ba2:	80 95       	com	r24
     ba4:	84 23       	and	r24, r20
     ba6:	80 83       	st	Z, r24
     ba8:	08 95       	ret

00000baa <INTx_init>:
		case 1:
		GICR.INT1 = ENABLE;
		break;
		
		case 2:
		GICR.INT2 = ENABLE;
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	a1 f0       	breq	.+40     	; 0xbd6 <INTx_init+0x2c>
     bae:	18 f0       	brcs	.+6      	; 0xbb6 <INTx_init+0xc>
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	19 f1       	breq	.+70     	; 0xbfa <INTx_init+0x50>
     bb4:	08 95       	ret
     bb6:	63 70       	andi	r22, 0x03	; 3
     bb8:	85 b7       	in	r24, 0x35	; 53
     bba:	8c 7f       	andi	r24, 0xFC	; 252
     bbc:	68 2b       	or	r22, r24
     bbe:	65 bf       	out	0x35, r22	; 53
     bc0:	8b b7       	in	r24, 0x3b	; 59
     bc2:	40 fb       	bst	r20, 0
     bc4:	86 f9       	bld	r24, 6
     bc6:	8b bf       	out	0x3b, r24	; 59
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	8a e1       	ldi	r24, 0x1A	; 26
     bcc:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	8a e1       	ldi	r24, 0x1A	; 26
     bd4:	24 c0       	rjmp	.+72     	; 0xc1e <INTx_init+0x74>
     bd6:	63 70       	andi	r22, 0x03	; 3
     bd8:	66 0f       	add	r22, r22
     bda:	66 0f       	add	r22, r22
     bdc:	85 b7       	in	r24, 0x35	; 53
     bde:	83 7f       	andi	r24, 0xF3	; 243
     be0:	68 2b       	or	r22, r24
     be2:	65 bf       	out	0x35, r22	; 53
     be4:	8b b7       	in	r24, 0x3b	; 59
     be6:	40 fb       	bst	r20, 0
     be8:	87 f9       	bld	r24, 7
     bea:	8b bf       	out	0x3b, r24	; 59
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	8b e1       	ldi	r24, 0x1B	; 27
     bf0:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	8b e1       	ldi	r24, 0x1B	; 27
     bf8:	12 c0       	rjmp	.+36     	; 0xc1e <INTx_init+0x74>
     bfa:	63 70       	andi	r22, 0x03	; 3
     bfc:	62 95       	swap	r22
     bfe:	66 0f       	add	r22, r22
     c00:	60 7e       	andi	r22, 0xE0	; 224
     c02:	84 b7       	in	r24, 0x34	; 52
     c04:	8f 79       	andi	r24, 0x9F	; 159
     c06:	68 2b       	or	r22, r24
     c08:	64 bf       	out	0x34, r22	; 52
     c0a:	8b b7       	in	r24, 0x3b	; 59
     c0c:	40 fb       	bst	r20, 0
     c0e:	85 f9       	bld	r24, 5
     c10:	8b bf       	out	0x3b, r24	; 59
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	8a e0       	ldi	r24, 0x0A	; 10
     c16:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_set_direction_pin>
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	0c 94 93 05 	jmp	0xb26	; 0xb26 <DIO_enable_disable_pull_up_pin>

00000c22 <INTx_ISR_callback>:

}


void INTx_ISR_callback(uint8_t INTx,void (*callback)(void)){
	switch(INTx){
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	21 f0       	breq	.+8      	; 0xc2e <INTx_ISR_callback+0xc>
     c26:	40 f0       	brcs	.+16     	; 0xc38 <INTx_ISR_callback+0x16>
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	31 f0       	breq	.+12     	; 0xc38 <INTx_ISR_callback+0x16>
     c2c:	08 95       	ret
		case 0:
		INT0_callback_function = callback;
		break;
		
		case 1:
		INT1_callback_function = callback;
     c2e:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <INT1_callback_function+0x1>
     c32:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <INT1_callback_function>
		break;
     c36:	08 95       	ret
		
		case 2:
		INT0_callback_function = callback;
     c38:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <INT0_callback_function+0x1>
     c3c:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <INT0_callback_function>
     c40:	08 95       	ret

00000c42 <__vector_1>:
		break;
	}
}


void INT0_VECTOR(void) {
     c42:	1f 92       	push	r1
     c44:	0f 92       	push	r0
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	0f 92       	push	r0
     c4a:	11 24       	eor	r1, r1
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	4f 93       	push	r20
     c52:	5f 93       	push	r21
     c54:	6f 93       	push	r22
     c56:	7f 93       	push	r23
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	af 93       	push	r26
     c5e:	bf 93       	push	r27
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
	INT0_callback_function();
     c64:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <INT0_callback_function>
     c68:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <INT0_callback_function+0x1>
     c6c:	09 95       	icall
}
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <__vector_2>:


void INT1_VECTOR(void) {
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	INT1_callback_function();
     cb2:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <INT1_callback_function>
     cb6:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <INT1_callback_function+0x1>
     cba:	09 95       	icall
	
}
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_3>:

void INT2_VECTOR(void) {
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
	INT2_callback_function();
     d00:	e0 e0       	ldi	r30, 0x00	; 0
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	09 95       	icall
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <GINT_enable_global_interrupt>:
 */ 

#include "../headers/GINT.h"

void GINT_enable_global_interrupt(void){
	SET_BIT(SREG_INT,GINT_BIT_MASK);
     d28:	8f b7       	in	r24, 0x3f	; 63
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8f bf       	out	0x3f, r24	; 63
     d2e:	08 95       	ret

00000d30 <sprintf>:
     d30:	ae e0       	ldi	r26, 0x0E	; 14
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ee e9       	ldi	r30, 0x9E	; 158
     d36:	f6 e0       	ldi	r31, 0x06	; 6
     d38:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__prologue_saves__+0x1c>
     d3c:	0d 89       	ldd	r16, Y+21	; 0x15
     d3e:	1e 89       	ldd	r17, Y+22	; 0x16
     d40:	86 e0       	ldi	r24, 0x06	; 6
     d42:	8c 83       	std	Y+4, r24	; 0x04
     d44:	1a 83       	std	Y+2, r17	; 0x02
     d46:	09 83       	std	Y+1, r16	; 0x01
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	9f e7       	ldi	r25, 0x7F	; 127
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	ae 01       	movw	r20, r28
     d52:	47 5e       	subi	r20, 0xE7	; 231
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	6f 89       	ldd	r22, Y+23	; 0x17
     d58:	78 8d       	ldd	r23, Y+24	; 0x18
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	0e 94 ba 06 	call	0xd74	; 0xd74 <vfprintf>
     d62:	ef 81       	ldd	r30, Y+7	; 0x07
     d64:	f8 85       	ldd	r31, Y+8	; 0x08
     d66:	e0 0f       	add	r30, r16
     d68:	f1 1f       	adc	r31, r17
     d6a:	10 82       	st	Z, r1
     d6c:	2e 96       	adiw	r28, 0x0e	; 14
     d6e:	e4 e0       	ldi	r30, 0x04	; 4
     d70:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__epilogue_restores__+0x1c>

00000d74 <vfprintf>:
     d74:	ab e0       	ldi	r26, 0x0B	; 11
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e0 ec       	ldi	r30, 0xC0	; 192
     d7a:	f6 e0       	ldi	r31, 0x06	; 6
     d7c:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__prologue_saves__>
     d80:	6c 01       	movw	r12, r24
     d82:	7b 01       	movw	r14, r22
     d84:	8a 01       	movw	r16, r20
     d86:	fc 01       	movw	r30, r24
     d88:	17 82       	std	Z+7, r1	; 0x07
     d8a:	16 82       	std	Z+6, r1	; 0x06
     d8c:	83 81       	ldd	r24, Z+3	; 0x03
     d8e:	81 ff       	sbrs	r24, 1
     d90:	cc c1       	rjmp	.+920    	; 0x112a <vfprintf+0x3b6>
     d92:	ce 01       	movw	r24, r28
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	3c 01       	movw	r6, r24
     d98:	f6 01       	movw	r30, r12
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	f7 01       	movw	r30, r14
     d9e:	93 fd       	sbrc	r25, 3
     da0:	85 91       	lpm	r24, Z+
     da2:	93 ff       	sbrs	r25, 3
     da4:	81 91       	ld	r24, Z+
     da6:	7f 01       	movw	r14, r30
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <vfprintf+0x3a>
     dac:	ba c1       	rjmp	.+884    	; 0x1122 <vfprintf+0x3ae>
     dae:	85 32       	cpi	r24, 0x25	; 37
     db0:	39 f4       	brne	.+14     	; 0xdc0 <vfprintf+0x4c>
     db2:	93 fd       	sbrc	r25, 3
     db4:	85 91       	lpm	r24, Z+
     db6:	93 ff       	sbrs	r25, 3
     db8:	81 91       	ld	r24, Z+
     dba:	7f 01       	movw	r14, r30
     dbc:	85 32       	cpi	r24, 0x25	; 37
     dbe:	29 f4       	brne	.+10     	; 0xdca <vfprintf+0x56>
     dc0:	b6 01       	movw	r22, r12
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
     dc8:	e7 cf       	rjmp	.-50     	; 0xd98 <vfprintf+0x24>
     dca:	91 2c       	mov	r9, r1
     dcc:	21 2c       	mov	r2, r1
     dce:	31 2c       	mov	r3, r1
     dd0:	ff e1       	ldi	r31, 0x1F	; 31
     dd2:	f3 15       	cp	r31, r3
     dd4:	d8 f0       	brcs	.+54     	; 0xe0c <vfprintf+0x98>
     dd6:	8b 32       	cpi	r24, 0x2B	; 43
     dd8:	79 f0       	breq	.+30     	; 0xdf8 <vfprintf+0x84>
     dda:	38 f4       	brcc	.+14     	; 0xdea <vfprintf+0x76>
     ddc:	80 32       	cpi	r24, 0x20	; 32
     dde:	79 f0       	breq	.+30     	; 0xdfe <vfprintf+0x8a>
     de0:	83 32       	cpi	r24, 0x23	; 35
     de2:	a1 f4       	brne	.+40     	; 0xe0c <vfprintf+0x98>
     de4:	23 2d       	mov	r18, r3
     de6:	20 61       	ori	r18, 0x10	; 16
     de8:	1d c0       	rjmp	.+58     	; 0xe24 <vfprintf+0xb0>
     dea:	8d 32       	cpi	r24, 0x2D	; 45
     dec:	61 f0       	breq	.+24     	; 0xe06 <vfprintf+0x92>
     dee:	80 33       	cpi	r24, 0x30	; 48
     df0:	69 f4       	brne	.+26     	; 0xe0c <vfprintf+0x98>
     df2:	23 2d       	mov	r18, r3
     df4:	21 60       	ori	r18, 0x01	; 1
     df6:	16 c0       	rjmp	.+44     	; 0xe24 <vfprintf+0xb0>
     df8:	83 2d       	mov	r24, r3
     dfa:	82 60       	ori	r24, 0x02	; 2
     dfc:	38 2e       	mov	r3, r24
     dfe:	e3 2d       	mov	r30, r3
     e00:	e4 60       	ori	r30, 0x04	; 4
     e02:	3e 2e       	mov	r3, r30
     e04:	2a c0       	rjmp	.+84     	; 0xe5a <vfprintf+0xe6>
     e06:	f3 2d       	mov	r31, r3
     e08:	f8 60       	ori	r31, 0x08	; 8
     e0a:	1d c0       	rjmp	.+58     	; 0xe46 <vfprintf+0xd2>
     e0c:	37 fc       	sbrc	r3, 7
     e0e:	2d c0       	rjmp	.+90     	; 0xe6a <vfprintf+0xf6>
     e10:	20 ed       	ldi	r18, 0xD0	; 208
     e12:	28 0f       	add	r18, r24
     e14:	2a 30       	cpi	r18, 0x0A	; 10
     e16:	40 f0       	brcs	.+16     	; 0xe28 <vfprintf+0xb4>
     e18:	8e 32       	cpi	r24, 0x2E	; 46
     e1a:	b9 f4       	brne	.+46     	; 0xe4a <vfprintf+0xd6>
     e1c:	36 fc       	sbrc	r3, 6
     e1e:	81 c1       	rjmp	.+770    	; 0x1122 <vfprintf+0x3ae>
     e20:	23 2d       	mov	r18, r3
     e22:	20 64       	ori	r18, 0x40	; 64
     e24:	32 2e       	mov	r3, r18
     e26:	19 c0       	rjmp	.+50     	; 0xe5a <vfprintf+0xe6>
     e28:	36 fe       	sbrs	r3, 6
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <vfprintf+0xc4>
     e2c:	8a e0       	ldi	r24, 0x0A	; 10
     e2e:	98 9e       	mul	r9, r24
     e30:	20 0d       	add	r18, r0
     e32:	11 24       	eor	r1, r1
     e34:	92 2e       	mov	r9, r18
     e36:	11 c0       	rjmp	.+34     	; 0xe5a <vfprintf+0xe6>
     e38:	ea e0       	ldi	r30, 0x0A	; 10
     e3a:	2e 9e       	mul	r2, r30
     e3c:	20 0d       	add	r18, r0
     e3e:	11 24       	eor	r1, r1
     e40:	22 2e       	mov	r2, r18
     e42:	f3 2d       	mov	r31, r3
     e44:	f0 62       	ori	r31, 0x20	; 32
     e46:	3f 2e       	mov	r3, r31
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <vfprintf+0xe6>
     e4a:	8c 36       	cpi	r24, 0x6C	; 108
     e4c:	21 f4       	brne	.+8      	; 0xe56 <vfprintf+0xe2>
     e4e:	83 2d       	mov	r24, r3
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	38 2e       	mov	r3, r24
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0xe6>
     e56:	88 36       	cpi	r24, 0x68	; 104
     e58:	41 f4       	brne	.+16     	; 0xe6a <vfprintf+0xf6>
     e5a:	f7 01       	movw	r30, r14
     e5c:	93 fd       	sbrc	r25, 3
     e5e:	85 91       	lpm	r24, Z+
     e60:	93 ff       	sbrs	r25, 3
     e62:	81 91       	ld	r24, Z+
     e64:	7f 01       	movw	r14, r30
     e66:	81 11       	cpse	r24, r1
     e68:	b3 cf       	rjmp	.-154    	; 0xdd0 <vfprintf+0x5c>
     e6a:	98 2f       	mov	r25, r24
     e6c:	9f 7d       	andi	r25, 0xDF	; 223
     e6e:	95 54       	subi	r25, 0x45	; 69
     e70:	93 30       	cpi	r25, 0x03	; 3
     e72:	28 f4       	brcc	.+10     	; 0xe7e <vfprintf+0x10a>
     e74:	0c 5f       	subi	r16, 0xFC	; 252
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	9f e3       	ldi	r25, 0x3F	; 63
     e7a:	99 83       	std	Y+1, r25	; 0x01
     e7c:	0d c0       	rjmp	.+26     	; 0xe98 <vfprintf+0x124>
     e7e:	83 36       	cpi	r24, 0x63	; 99
     e80:	31 f0       	breq	.+12     	; 0xe8e <vfprintf+0x11a>
     e82:	83 37       	cpi	r24, 0x73	; 115
     e84:	71 f0       	breq	.+28     	; 0xea2 <vfprintf+0x12e>
     e86:	83 35       	cpi	r24, 0x53	; 83
     e88:	09 f0       	breq	.+2      	; 0xe8c <vfprintf+0x118>
     e8a:	59 c0       	rjmp	.+178    	; 0xf3e <vfprintf+0x1ca>
     e8c:	21 c0       	rjmp	.+66     	; 0xed0 <vfprintf+0x15c>
     e8e:	f8 01       	movw	r30, r16
     e90:	80 81       	ld	r24, Z
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	0e 5f       	subi	r16, 0xFE	; 254
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
     e98:	88 24       	eor	r8, r8
     e9a:	83 94       	inc	r8
     e9c:	91 2c       	mov	r9, r1
     e9e:	53 01       	movw	r10, r6
     ea0:	13 c0       	rjmp	.+38     	; 0xec8 <vfprintf+0x154>
     ea2:	28 01       	movw	r4, r16
     ea4:	f2 e0       	ldi	r31, 0x02	; 2
     ea6:	4f 0e       	add	r4, r31
     ea8:	51 1c       	adc	r5, r1
     eaa:	f8 01       	movw	r30, r16
     eac:	a0 80       	ld	r10, Z
     eae:	b1 80       	ldd	r11, Z+1	; 0x01
     eb0:	36 fe       	sbrs	r3, 6
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <vfprintf+0x146>
     eb4:	69 2d       	mov	r22, r9
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <vfprintf+0x14a>
     eba:	6f ef       	ldi	r22, 0xFF	; 255
     ebc:	7f ef       	ldi	r23, 0xFF	; 255
     ebe:	c5 01       	movw	r24, r10
     ec0:	0e 94 a6 08 	call	0x114c	; 0x114c <strnlen>
     ec4:	4c 01       	movw	r8, r24
     ec6:	82 01       	movw	r16, r4
     ec8:	f3 2d       	mov	r31, r3
     eca:	ff 77       	andi	r31, 0x7F	; 127
     ecc:	3f 2e       	mov	r3, r31
     ece:	16 c0       	rjmp	.+44     	; 0xefc <vfprintf+0x188>
     ed0:	28 01       	movw	r4, r16
     ed2:	22 e0       	ldi	r18, 0x02	; 2
     ed4:	42 0e       	add	r4, r18
     ed6:	51 1c       	adc	r5, r1
     ed8:	f8 01       	movw	r30, r16
     eda:	a0 80       	ld	r10, Z
     edc:	b1 80       	ldd	r11, Z+1	; 0x01
     ede:	36 fe       	sbrs	r3, 6
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <vfprintf+0x174>
     ee2:	69 2d       	mov	r22, r9
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <vfprintf+0x178>
     ee8:	6f ef       	ldi	r22, 0xFF	; 255
     eea:	7f ef       	ldi	r23, 0xFF	; 255
     eec:	c5 01       	movw	r24, r10
     eee:	0e 94 9b 08 	call	0x1136	; 0x1136 <strnlen_P>
     ef2:	4c 01       	movw	r8, r24
     ef4:	f3 2d       	mov	r31, r3
     ef6:	f0 68       	ori	r31, 0x80	; 128
     ef8:	3f 2e       	mov	r3, r31
     efa:	82 01       	movw	r16, r4
     efc:	33 fc       	sbrc	r3, 3
     efe:	1b c0       	rjmp	.+54     	; 0xf36 <vfprintf+0x1c2>
     f00:	82 2d       	mov	r24, r2
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	88 16       	cp	r8, r24
     f06:	99 06       	cpc	r9, r25
     f08:	b0 f4       	brcc	.+44     	; 0xf36 <vfprintf+0x1c2>
     f0a:	b6 01       	movw	r22, r12
     f0c:	80 e2       	ldi	r24, 0x20	; 32
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
     f14:	2a 94       	dec	r2
     f16:	f4 cf       	rjmp	.-24     	; 0xf00 <vfprintf+0x18c>
     f18:	f5 01       	movw	r30, r10
     f1a:	37 fc       	sbrc	r3, 7
     f1c:	85 91       	lpm	r24, Z+
     f1e:	37 fe       	sbrs	r3, 7
     f20:	81 91       	ld	r24, Z+
     f22:	5f 01       	movw	r10, r30
     f24:	b6 01       	movw	r22, r12
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
     f2c:	21 10       	cpse	r2, r1
     f2e:	2a 94       	dec	r2
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	82 1a       	sub	r8, r18
     f34:	91 08       	sbc	r9, r1
     f36:	81 14       	cp	r8, r1
     f38:	91 04       	cpc	r9, r1
     f3a:	71 f7       	brne	.-36     	; 0xf18 <vfprintf+0x1a4>
     f3c:	e8 c0       	rjmp	.+464    	; 0x110e <vfprintf+0x39a>
     f3e:	84 36       	cpi	r24, 0x64	; 100
     f40:	11 f0       	breq	.+4      	; 0xf46 <vfprintf+0x1d2>
     f42:	89 36       	cpi	r24, 0x69	; 105
     f44:	41 f5       	brne	.+80     	; 0xf96 <vfprintf+0x222>
     f46:	f8 01       	movw	r30, r16
     f48:	37 fe       	sbrs	r3, 7
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <vfprintf+0x1e6>
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	0c 5f       	subi	r16, 0xFC	; 252
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	08 c0       	rjmp	.+16     	; 0xf6a <vfprintf+0x1f6>
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	07 2e       	mov	r0, r23
     f60:	00 0c       	add	r0, r0
     f62:	88 0b       	sbc	r24, r24
     f64:	99 0b       	sbc	r25, r25
     f66:	0e 5f       	subi	r16, 0xFE	; 254
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	f3 2d       	mov	r31, r3
     f6c:	ff 76       	andi	r31, 0x6F	; 111
     f6e:	3f 2e       	mov	r3, r31
     f70:	97 ff       	sbrs	r25, 7
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <vfprintf+0x212>
     f74:	90 95       	com	r25
     f76:	80 95       	com	r24
     f78:	70 95       	com	r23
     f7a:	61 95       	neg	r22
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	f0 68       	ori	r31, 0x80	; 128
     f84:	3f 2e       	mov	r3, r31
     f86:	2a e0       	ldi	r18, 0x0A	; 10
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	a3 01       	movw	r20, r6
     f8c:	0e 94 ed 08 	call	0x11da	; 0x11da <__ultoa_invert>
     f90:	88 2e       	mov	r8, r24
     f92:	86 18       	sub	r8, r6
     f94:	45 c0       	rjmp	.+138    	; 0x1020 <vfprintf+0x2ac>
     f96:	85 37       	cpi	r24, 0x75	; 117
     f98:	31 f4       	brne	.+12     	; 0xfa6 <vfprintf+0x232>
     f9a:	23 2d       	mov	r18, r3
     f9c:	2f 7e       	andi	r18, 0xEF	; 239
     f9e:	b2 2e       	mov	r11, r18
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	25 c0       	rjmp	.+74     	; 0xff0 <vfprintf+0x27c>
     fa6:	93 2d       	mov	r25, r3
     fa8:	99 7f       	andi	r25, 0xF9	; 249
     faa:	b9 2e       	mov	r11, r25
     fac:	8f 36       	cpi	r24, 0x6F	; 111
     fae:	c1 f0       	breq	.+48     	; 0xfe0 <vfprintf+0x26c>
     fb0:	18 f4       	brcc	.+6      	; 0xfb8 <vfprintf+0x244>
     fb2:	88 35       	cpi	r24, 0x58	; 88
     fb4:	79 f0       	breq	.+30     	; 0xfd4 <vfprintf+0x260>
     fb6:	b5 c0       	rjmp	.+362    	; 0x1122 <vfprintf+0x3ae>
     fb8:	80 37       	cpi	r24, 0x70	; 112
     fba:	19 f0       	breq	.+6      	; 0xfc2 <vfprintf+0x24e>
     fbc:	88 37       	cpi	r24, 0x78	; 120
     fbe:	21 f0       	breq	.+8      	; 0xfc8 <vfprintf+0x254>
     fc0:	b0 c0       	rjmp	.+352    	; 0x1122 <vfprintf+0x3ae>
     fc2:	e9 2f       	mov	r30, r25
     fc4:	e0 61       	ori	r30, 0x10	; 16
     fc6:	be 2e       	mov	r11, r30
     fc8:	b4 fe       	sbrs	r11, 4
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <vfprintf+0x272>
     fcc:	fb 2d       	mov	r31, r11
     fce:	f4 60       	ori	r31, 0x04	; 4
     fd0:	bf 2e       	mov	r11, r31
     fd2:	09 c0       	rjmp	.+18     	; 0xfe6 <vfprintf+0x272>
     fd4:	34 fe       	sbrs	r3, 4
     fd6:	0a c0       	rjmp	.+20     	; 0xfec <vfprintf+0x278>
     fd8:	29 2f       	mov	r18, r25
     fda:	26 60       	ori	r18, 0x06	; 6
     fdc:	b2 2e       	mov	r11, r18
     fde:	06 c0       	rjmp	.+12     	; 0xfec <vfprintf+0x278>
     fe0:	28 e0       	ldi	r18, 0x08	; 8
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <vfprintf+0x27c>
     fe6:	20 e1       	ldi	r18, 0x10	; 16
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x27c>
     fec:	20 e1       	ldi	r18, 0x10	; 16
     fee:	32 e0       	ldi	r19, 0x02	; 2
     ff0:	f8 01       	movw	r30, r16
     ff2:	b7 fe       	sbrs	r11, 7
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <vfprintf+0x290>
     ff6:	60 81       	ld	r22, Z
     ff8:	71 81       	ldd	r23, Z+1	; 0x01
     ffa:	82 81       	ldd	r24, Z+2	; 0x02
     ffc:	93 81       	ldd	r25, Z+3	; 0x03
     ffe:	0c 5f       	subi	r16, 0xFC	; 252
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <vfprintf+0x29c>
    1004:	60 81       	ld	r22, Z
    1006:	71 81       	ldd	r23, Z+1	; 0x01
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 5f       	subi	r16, 0xFE	; 254
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	a3 01       	movw	r20, r6
    1012:	0e 94 ed 08 	call	0x11da	; 0x11da <__ultoa_invert>
    1016:	88 2e       	mov	r8, r24
    1018:	86 18       	sub	r8, r6
    101a:	fb 2d       	mov	r31, r11
    101c:	ff 77       	andi	r31, 0x7F	; 127
    101e:	3f 2e       	mov	r3, r31
    1020:	36 fe       	sbrs	r3, 6
    1022:	0d c0       	rjmp	.+26     	; 0x103e <vfprintf+0x2ca>
    1024:	23 2d       	mov	r18, r3
    1026:	2e 7f       	andi	r18, 0xFE	; 254
    1028:	a2 2e       	mov	r10, r18
    102a:	89 14       	cp	r8, r9
    102c:	58 f4       	brcc	.+22     	; 0x1044 <vfprintf+0x2d0>
    102e:	34 fe       	sbrs	r3, 4
    1030:	0b c0       	rjmp	.+22     	; 0x1048 <vfprintf+0x2d4>
    1032:	32 fc       	sbrc	r3, 2
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <vfprintf+0x2d4>
    1036:	83 2d       	mov	r24, r3
    1038:	8e 7e       	andi	r24, 0xEE	; 238
    103a:	a8 2e       	mov	r10, r24
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <vfprintf+0x2d4>
    103e:	b8 2c       	mov	r11, r8
    1040:	a3 2c       	mov	r10, r3
    1042:	03 c0       	rjmp	.+6      	; 0x104a <vfprintf+0x2d6>
    1044:	b8 2c       	mov	r11, r8
    1046:	01 c0       	rjmp	.+2      	; 0x104a <vfprintf+0x2d6>
    1048:	b9 2c       	mov	r11, r9
    104a:	a4 fe       	sbrs	r10, 4
    104c:	0f c0       	rjmp	.+30     	; 0x106c <vfprintf+0x2f8>
    104e:	fe 01       	movw	r30, r28
    1050:	e8 0d       	add	r30, r8
    1052:	f1 1d       	adc	r31, r1
    1054:	80 81       	ld	r24, Z
    1056:	80 33       	cpi	r24, 0x30	; 48
    1058:	21 f4       	brne	.+8      	; 0x1062 <vfprintf+0x2ee>
    105a:	9a 2d       	mov	r25, r10
    105c:	99 7e       	andi	r25, 0xE9	; 233
    105e:	a9 2e       	mov	r10, r25
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <vfprintf+0x300>
    1062:	a2 fe       	sbrs	r10, 2
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <vfprintf+0x2fe>
    1066:	b3 94       	inc	r11
    1068:	b3 94       	inc	r11
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <vfprintf+0x300>
    106c:	8a 2d       	mov	r24, r10
    106e:	86 78       	andi	r24, 0x86	; 134
    1070:	09 f0       	breq	.+2      	; 0x1074 <vfprintf+0x300>
    1072:	b3 94       	inc	r11
    1074:	a3 fc       	sbrc	r10, 3
    1076:	11 c0       	rjmp	.+34     	; 0x109a <vfprintf+0x326>
    1078:	a0 fe       	sbrs	r10, 0
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0x314>
    107c:	b2 14       	cp	r11, r2
    107e:	88 f4       	brcc	.+34     	; 0x10a2 <vfprintf+0x32e>
    1080:	28 0c       	add	r2, r8
    1082:	92 2c       	mov	r9, r2
    1084:	9b 18       	sub	r9, r11
    1086:	0e c0       	rjmp	.+28     	; 0x10a4 <vfprintf+0x330>
    1088:	b2 14       	cp	r11, r2
    108a:	60 f4       	brcc	.+24     	; 0x10a4 <vfprintf+0x330>
    108c:	b6 01       	movw	r22, r12
    108e:	80 e2       	ldi	r24, 0x20	; 32
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
    1096:	b3 94       	inc	r11
    1098:	f7 cf       	rjmp	.-18     	; 0x1088 <vfprintf+0x314>
    109a:	b2 14       	cp	r11, r2
    109c:	18 f4       	brcc	.+6      	; 0x10a4 <vfprintf+0x330>
    109e:	2b 18       	sub	r2, r11
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x332>
    10a2:	98 2c       	mov	r9, r8
    10a4:	21 2c       	mov	r2, r1
    10a6:	a4 fe       	sbrs	r10, 4
    10a8:	10 c0       	rjmp	.+32     	; 0x10ca <vfprintf+0x356>
    10aa:	b6 01       	movw	r22, r12
    10ac:	80 e3       	ldi	r24, 0x30	; 48
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
    10b4:	a2 fe       	sbrs	r10, 2
    10b6:	17 c0       	rjmp	.+46     	; 0x10e6 <vfprintf+0x372>
    10b8:	a1 fc       	sbrc	r10, 1
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfprintf+0x34e>
    10bc:	88 e7       	ldi	r24, 0x78	; 120
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x352>
    10c2:	88 e5       	ldi	r24, 0x58	; 88
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	b6 01       	movw	r22, r12
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <vfprintf+0x36e>
    10ca:	8a 2d       	mov	r24, r10
    10cc:	86 78       	andi	r24, 0x86	; 134
    10ce:	59 f0       	breq	.+22     	; 0x10e6 <vfprintf+0x372>
    10d0:	a1 fe       	sbrs	r10, 1
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <vfprintf+0x364>
    10d4:	8b e2       	ldi	r24, 0x2B	; 43
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <vfprintf+0x366>
    10d8:	80 e2       	ldi	r24, 0x20	; 32
    10da:	a7 fc       	sbrc	r10, 7
    10dc:	8d e2       	ldi	r24, 0x2D	; 45
    10de:	b6 01       	movw	r22, r12
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
    10e6:	89 14       	cp	r8, r9
    10e8:	38 f4       	brcc	.+14     	; 0x10f8 <vfprintf+0x384>
    10ea:	b6 01       	movw	r22, r12
    10ec:	80 e3       	ldi	r24, 0x30	; 48
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
    10f4:	9a 94       	dec	r9
    10f6:	f7 cf       	rjmp	.-18     	; 0x10e6 <vfprintf+0x372>
    10f8:	8a 94       	dec	r8
    10fa:	f3 01       	movw	r30, r6
    10fc:	e8 0d       	add	r30, r8
    10fe:	f1 1d       	adc	r31, r1
    1100:	80 81       	ld	r24, Z
    1102:	b6 01       	movw	r22, r12
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
    110a:	81 10       	cpse	r8, r1
    110c:	f5 cf       	rjmp	.-22     	; 0x10f8 <vfprintf+0x384>
    110e:	22 20       	and	r2, r2
    1110:	09 f4       	brne	.+2      	; 0x1114 <vfprintf+0x3a0>
    1112:	42 ce       	rjmp	.-892    	; 0xd98 <vfprintf+0x24>
    1114:	b6 01       	movw	r22, r12
    1116:	80 e2       	ldi	r24, 0x20	; 32
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 b1 08 	call	0x1162	; 0x1162 <fputc>
    111e:	2a 94       	dec	r2
    1120:	f6 cf       	rjmp	.-20     	; 0x110e <vfprintf+0x39a>
    1122:	f6 01       	movw	r30, r12
    1124:	86 81       	ldd	r24, Z+6	; 0x06
    1126:	97 81       	ldd	r25, Z+7	; 0x07
    1128:	02 c0       	rjmp	.+4      	; 0x112e <vfprintf+0x3ba>
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	9f ef       	ldi	r25, 0xFF	; 255
    112e:	2b 96       	adiw	r28, 0x0b	; 11
    1130:	e2 e1       	ldi	r30, 0x12	; 18
    1132:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__epilogue_restores__>

00001136 <strnlen_P>:
    1136:	fc 01       	movw	r30, r24
    1138:	05 90       	lpm	r0, Z+
    113a:	61 50       	subi	r22, 0x01	; 1
    113c:	70 40       	sbci	r23, 0x00	; 0
    113e:	01 10       	cpse	r0, r1
    1140:	d8 f7       	brcc	.-10     	; 0x1138 <strnlen_P+0x2>
    1142:	80 95       	com	r24
    1144:	90 95       	com	r25
    1146:	8e 0f       	add	r24, r30
    1148:	9f 1f       	adc	r25, r31
    114a:	08 95       	ret

0000114c <strnlen>:
    114c:	fc 01       	movw	r30, r24
    114e:	61 50       	subi	r22, 0x01	; 1
    1150:	70 40       	sbci	r23, 0x00	; 0
    1152:	01 90       	ld	r0, Z+
    1154:	01 10       	cpse	r0, r1
    1156:	d8 f7       	brcc	.-10     	; 0x114e <strnlen+0x2>
    1158:	80 95       	com	r24
    115a:	90 95       	com	r25
    115c:	8e 0f       	add	r24, r30
    115e:	9f 1f       	adc	r25, r31
    1160:	08 95       	ret

00001162 <fputc>:
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	fb 01       	movw	r30, r22
    116c:	23 81       	ldd	r18, Z+3	; 0x03
    116e:	21 fd       	sbrc	r18, 1
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <fputc+0x16>
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	2c c0       	rjmp	.+88     	; 0x11d0 <fputc+0x6e>
    1178:	22 ff       	sbrs	r18, 2
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <fputc+0x46>
    117c:	46 81       	ldd	r20, Z+6	; 0x06
    117e:	57 81       	ldd	r21, Z+7	; 0x07
    1180:	24 81       	ldd	r18, Z+4	; 0x04
    1182:	35 81       	ldd	r19, Z+5	; 0x05
    1184:	42 17       	cp	r20, r18
    1186:	53 07       	cpc	r21, r19
    1188:	44 f4       	brge	.+16     	; 0x119a <fputc+0x38>
    118a:	a0 81       	ld	r26, Z
    118c:	b1 81       	ldd	r27, Z+1	; 0x01
    118e:	9d 01       	movw	r18, r26
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	31 83       	std	Z+1, r19	; 0x01
    1196:	20 83       	st	Z, r18
    1198:	8c 93       	st	X, r24
    119a:	26 81       	ldd	r18, Z+6	; 0x06
    119c:	37 81       	ldd	r19, Z+7	; 0x07
    119e:	2f 5f       	subi	r18, 0xFF	; 255
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	37 83       	std	Z+7, r19	; 0x07
    11a4:	26 83       	std	Z+6, r18	; 0x06
    11a6:	14 c0       	rjmp	.+40     	; 0x11d0 <fputc+0x6e>
    11a8:	8b 01       	movw	r16, r22
    11aa:	ec 01       	movw	r28, r24
    11ac:	fb 01       	movw	r30, r22
    11ae:	00 84       	ldd	r0, Z+8	; 0x08
    11b0:	f1 85       	ldd	r31, Z+9	; 0x09
    11b2:	e0 2d       	mov	r30, r0
    11b4:	09 95       	icall
    11b6:	89 2b       	or	r24, r25
    11b8:	e1 f6       	brne	.-72     	; 0x1172 <fputc+0x10>
    11ba:	d8 01       	movw	r26, r16
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	8d 91       	ld	r24, X+
    11c0:	9c 91       	ld	r25, X
    11c2:	17 97       	sbiw	r26, 0x07	; 7
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	17 96       	adiw	r26, 0x07	; 7
    11c8:	9c 93       	st	X, r25
    11ca:	8e 93       	st	-X, r24
    11cc:	16 97       	sbiw	r26, 0x06	; 6
    11ce:	ce 01       	movw	r24, r28
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	08 95       	ret

000011da <__ultoa_invert>:
    11da:	fa 01       	movw	r30, r20
    11dc:	aa 27       	eor	r26, r26
    11de:	28 30       	cpi	r18, 0x08	; 8
    11e0:	51 f1       	breq	.+84     	; 0x1236 <__ultoa_invert+0x5c>
    11e2:	20 31       	cpi	r18, 0x10	; 16
    11e4:	81 f1       	breq	.+96     	; 0x1246 <__ultoa_invert+0x6c>
    11e6:	e8 94       	clt
    11e8:	6f 93       	push	r22
    11ea:	6e 7f       	andi	r22, 0xFE	; 254
    11ec:	6e 5f       	subi	r22, 0xFE	; 254
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	af 4f       	sbci	r26, 0xFF	; 255
    11f6:	b1 e0       	ldi	r27, 0x01	; 1
    11f8:	3e d0       	rcall	.+124    	; 0x1276 <__ultoa_invert+0x9c>
    11fa:	b4 e0       	ldi	r27, 0x04	; 4
    11fc:	3c d0       	rcall	.+120    	; 0x1276 <__ultoa_invert+0x9c>
    11fe:	67 0f       	add	r22, r23
    1200:	78 1f       	adc	r23, r24
    1202:	89 1f       	adc	r24, r25
    1204:	9a 1f       	adc	r25, r26
    1206:	a1 1d       	adc	r26, r1
    1208:	68 0f       	add	r22, r24
    120a:	79 1f       	adc	r23, r25
    120c:	8a 1f       	adc	r24, r26
    120e:	91 1d       	adc	r25, r1
    1210:	a1 1d       	adc	r26, r1
    1212:	6a 0f       	add	r22, r26
    1214:	71 1d       	adc	r23, r1
    1216:	81 1d       	adc	r24, r1
    1218:	91 1d       	adc	r25, r1
    121a:	a1 1d       	adc	r26, r1
    121c:	20 d0       	rcall	.+64     	; 0x125e <__ultoa_invert+0x84>
    121e:	09 f4       	brne	.+2      	; 0x1222 <__ultoa_invert+0x48>
    1220:	68 94       	set
    1222:	3f 91       	pop	r19
    1224:	2a e0       	ldi	r18, 0x0A	; 10
    1226:	26 9f       	mul	r18, r22
    1228:	11 24       	eor	r1, r1
    122a:	30 19       	sub	r19, r0
    122c:	30 5d       	subi	r19, 0xD0	; 208
    122e:	31 93       	st	Z+, r19
    1230:	de f6       	brtc	.-74     	; 0x11e8 <__ultoa_invert+0xe>
    1232:	cf 01       	movw	r24, r30
    1234:	08 95       	ret
    1236:	46 2f       	mov	r20, r22
    1238:	47 70       	andi	r20, 0x07	; 7
    123a:	40 5d       	subi	r20, 0xD0	; 208
    123c:	41 93       	st	Z+, r20
    123e:	b3 e0       	ldi	r27, 0x03	; 3
    1240:	0f d0       	rcall	.+30     	; 0x1260 <__ultoa_invert+0x86>
    1242:	c9 f7       	brne	.-14     	; 0x1236 <__ultoa_invert+0x5c>
    1244:	f6 cf       	rjmp	.-20     	; 0x1232 <__ultoa_invert+0x58>
    1246:	46 2f       	mov	r20, r22
    1248:	4f 70       	andi	r20, 0x0F	; 15
    124a:	40 5d       	subi	r20, 0xD0	; 208
    124c:	4a 33       	cpi	r20, 0x3A	; 58
    124e:	18 f0       	brcs	.+6      	; 0x1256 <__ultoa_invert+0x7c>
    1250:	49 5d       	subi	r20, 0xD9	; 217
    1252:	31 fd       	sbrc	r19, 1
    1254:	40 52       	subi	r20, 0x20	; 32
    1256:	41 93       	st	Z+, r20
    1258:	02 d0       	rcall	.+4      	; 0x125e <__ultoa_invert+0x84>
    125a:	a9 f7       	brne	.-22     	; 0x1246 <__ultoa_invert+0x6c>
    125c:	ea cf       	rjmp	.-44     	; 0x1232 <__ultoa_invert+0x58>
    125e:	b4 e0       	ldi	r27, 0x04	; 4
    1260:	a6 95       	lsr	r26
    1262:	97 95       	ror	r25
    1264:	87 95       	ror	r24
    1266:	77 95       	ror	r23
    1268:	67 95       	ror	r22
    126a:	ba 95       	dec	r27
    126c:	c9 f7       	brne	.-14     	; 0x1260 <__ultoa_invert+0x86>
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	61 05       	cpc	r22, r1
    1272:	71 05       	cpc	r23, r1
    1274:	08 95       	ret
    1276:	9b 01       	movw	r18, r22
    1278:	ac 01       	movw	r20, r24
    127a:	0a 2e       	mov	r0, r26
    127c:	06 94       	lsr	r0
    127e:	57 95       	ror	r21
    1280:	47 95       	ror	r20
    1282:	37 95       	ror	r19
    1284:	27 95       	ror	r18
    1286:	ba 95       	dec	r27
    1288:	c9 f7       	brne	.-14     	; 0x127c <__ultoa_invert+0xa2>
    128a:	62 0f       	add	r22, r18
    128c:	73 1f       	adc	r23, r19
    128e:	84 1f       	adc	r24, r20
    1290:	95 1f       	adc	r25, r21
    1292:	a0 1d       	adc	r26, r0
    1294:	08 95       	ret

00001296 <__prologue_saves__>:
    1296:	2f 92       	push	r2
    1298:	3f 92       	push	r3
    129a:	4f 92       	push	r4
    129c:	5f 92       	push	r5
    129e:	6f 92       	push	r6
    12a0:	7f 92       	push	r7
    12a2:	8f 92       	push	r8
    12a4:	9f 92       	push	r9
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	ca 1b       	sub	r28, r26
    12c0:	db 0b       	sbc	r29, r27
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	09 94       	ijmp

000012ce <__epilogue_restores__>:
    12ce:	2a 88       	ldd	r2, Y+18	; 0x12
    12d0:	39 88       	ldd	r3, Y+17	; 0x11
    12d2:	48 88       	ldd	r4, Y+16	; 0x10
    12d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12da:	8c 84       	ldd	r8, Y+12	; 0x0c
    12dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12de:	aa 84       	ldd	r10, Y+10	; 0x0a
    12e0:	b9 84       	ldd	r11, Y+9	; 0x09
    12e2:	c8 84       	ldd	r12, Y+8	; 0x08
    12e4:	df 80       	ldd	r13, Y+7	; 0x07
    12e6:	ee 80       	ldd	r14, Y+6	; 0x06
    12e8:	fd 80       	ldd	r15, Y+5	; 0x05
    12ea:	0c 81       	ldd	r16, Y+4	; 0x04
    12ec:	1b 81       	ldd	r17, Y+3	; 0x03
    12ee:	aa 81       	ldd	r26, Y+2	; 0x02
    12f0:	b9 81       	ldd	r27, Y+1	; 0x01
    12f2:	ce 0f       	add	r28, r30
    12f4:	d1 1d       	adc	r29, r1
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	ed 01       	movw	r28, r26
    1302:	08 95       	ret

00001304 <_exit>:
    1304:	f8 94       	cli

00001306 <__stop_program>:
    1306:	ff cf       	rjmp	.-2      	; 0x1306 <__stop_program>
